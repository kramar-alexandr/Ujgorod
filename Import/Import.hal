external procedure PUVc_PasteTransDate(var record PUVc,var Boolean,var Boolean,var Boolean);
external procedure PUSumUp(var record PUVc);
external function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external function string 255 StrReplace(string,string,string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function val AbsoluteVal(val);

global updating procedure INImportIn()		//Edit----------------------Dima  05.02.2016
begin
	record INVc INr;
	record DIVc DIr;
	record ITVc ITr;	
	string 255 artcode, name, classBrand, className, itemGroup,classType;

	//SetImportCodepage("CP1251");

	while (TestEOF()==false) begin
		artcode = ImportField;
		name = ImportField;
		classBrand = ImportField;
		className = ImportField;
		classType = ImportField;
		itemGroup = ImportField;

		INr.Code = artcode;
		if (ReadFirstMain(INr,1,true)==false) then begin

			RecordNew(INr);
			INr.Code = artcode;
			INr.Name = name;
			INr.ItemType = kItemTypeStocked;
    	
    	if (nonblank(classBrand)) then begin
				DIr.Code = classBrand;
				if (ReadFirstMain(DIr,1,true)) then begin
					INr.DispGroups = DIr.Code;
				end else begin
					RecordNew(DIr);
					DIr.Code = classBrand;
					DIr.Name = className;
					DIr.CType = "BRAND";					
					RecordStore(DIr,true);
				end;
			end;
			
			if (nonblank(classType)) then begin
				DIr.Code = classType;
				if (ReadFirstMain(DIr,1,true)) then begin
					INr.DispGroups = DIr.Code;
				end else begin
					RecordNew(DIr);
					DIr.Code = classType;
					DIr.Name = classType;
					DIr.CType = "TYPE";
					DIr.DispGroups = "MAIN";
					RecordStore(DIr,true);
				end;
			end;
			
			INr.DispGroups = classType & "," & classBrand;
			
			if (nonblank(itemGroup)) then begin
				ITr.Code = itemGroup;
				if (ReadFirstMain(ITr,1,true)) then begin
					INr.Group = ITr.Code;
				end else begin
					RecordNew(ITr);
					ITr.Code = itemGroup;
					ITr.Comment = className;
					RecordStore(ITr,true);
					INr.Group = ITr.Code;
				end;
			end;			
						
			
			RecordStore(INr,true);
		end;

		NextImportLine(true);
	end;
  
end;


global updating procedure VARImportIn()
begin
	record VARVc VARr;
	string 255 code, name, group;

	SetImportCodepage("CP1251");

	while (TestEOF()==false) begin
		code = ImportField;
		name = ImportField;
		group = ImportField;

		VARr.Code = code;
		if (ReadFirstMain(VARr,1,true)==false) then begin
			RecordNew(VARr);
			VARr.Code = code;
			VARr.Comment = name;
			VARr.VARGCode = group;
			RecordStore(VARr,true);			
		end;

		NextImportLine(true);
	end;  
end;


global updating procedure ItemPricesImportIn()
begin
	record VARVc VARr;
	record INVc INr;
	record PLVc PLr;
	record BarcodeVc Barr;
	string 255 code, var1,var2,bar,aditional,fullcode,collection,serialNr;
	val price;

	//SetImportCodepage("CP1251");

	while (TestEOF()==false) begin
		code = ImportField;
		var1 = ImportField;
		var2 = ImportField;
		collection = ImportField;
		price = StringToVal(ImportField,M45Val);
		bar = ImportField;
		
		if(blank(var1))then begin
				var1 = "OS";
			end;
			if(blank(var2))then begin
				var2 = "OS";
			end;
			if(blank(collection))then begin
				collection = "OS";
			end;
		
		serialNr = code & "." & var1 & "." & var2 & "." & collection;

		if (nonblank(code)) then begin

			recordnew(PLr);
			PLr.ArtCode = code;
			PLr.PLCode = "RRP";
			PLr.SerialNr = serialNr;
			PLr.ExVatPrice = price;
			INr.Code = code;
			if (ReadFirstMain(INr,1,true))	then begin
				PLr.Comment = INr.Name;
			end;
			RecordStore(PLr,false);
    	
    	if (nonblank(bar)) then begin
				recordnew(Barr);
				Barr.Itemcode = code;
				Barr.Barcode = bar;
				Barr.Comment = INr.Name;
				Barr.SerialNr = serialNr;
				RecordStore(Barr,false);
			end;

		end;

		NextImportLine(true);
	end;  
end;



global updating procedure ImportStockRemainsIn()			//Edit----------------------Dima  14.06.2016
begin
	record PUVc PUr;
	row PUVc PUrw;
	string 100 location;
	string 255 code, var1,var2,collection;
	Boolean datewarnf,warnoldrecordsf,warnfutdatef;
	string 255 warning,inwarn;
	integer rownr,qty;
	val cost;
	
	location = ImportField;
	NextImportLine(true);
	
	if (blank(location)) then begin
		goto LImportStockRemainsIn;
	end;
	
	RecordNew(PUr);
	PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
	PUr.TransDate = CurrentDate;
	PUr.Location = location;
	PUVc_PasteTransDate(PUr,datewarnf,warnoldrecordsf,warnfutdatef);
	rownr = 0;
	
	while (TestEOF()==false) begin
		code = ImportField;
		var1 = ImportField;
		var2 = ImportField;
		collection = ImportField;
		cost = StringToVal(ImportField,M45Val);
		qty = StringToInt(ImportField);


		if (nonblank(code)) then begin

			PUrw.ArtCode = code;
			MatRowPut(PUr,rownr,PUrw);
			PUVc_PasteArtCode(PUr,rownr,warning,inwarn);
			MatRowGet(PUr,rownr,PUrw);
			if(blank(var1))then begin
				var1 = "OS";
			end;
			if(blank(var2))then begin
				var2 = "OS";
			end;
			if(blank(collection))then begin
				collection = "OS";
			end;
			PUrw.SerialNr = code & "." & var1 & "." & var2 & "." & collection;
			PUrw.Quant = qty;
			PUrw.UPrice = cost;
    	PUrw.CostPrice = cost;
    	PUrw.Sum = cost*qty;		
			MatRowPut(PUr,rownr,PUrw);
			rownr = rownr + 1;
			if(rownr>=500)then begin
				PUSumUp(PUr);
				RecordInsert(PUr,true);
				logtext(0,"PU Imported " & PUr.SerNr);
				RecordNew(PUr);
				PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
				PUr.TransDate = CurrentDate;
				PUr.Location = location;
				PUVc_PasteTransDate(PUr,datewarnf,warnoldrecordsf,warnfutdatef);
				rownr = 0;
			end;
		end;

		NextImportLine(true);
	end;
	PUSumUp(PUr);
	RecordInsert(PUr,true);
	
  
  LImportStockRemainsIn:;
end;

global updating procedure ImportStockRemains2In()//Edit-------------------Vitalii 16:44 19.07.2016
begin
	record PUVc PUr;
	row PUVc PUrw;
	string 100 location;
	string 255 code, var1,var2,collection;
	Boolean datewarnf,warnoldrecordsf,warnfutdatef;
	string 255 warning,inwarn;
	integer rownr,qty;
	val cost;
	
	location = ImportField;
	NextImportLine(true);
	
	if (blank(location)) then begin
		goto LImportStockRemains2In;
	end;
	
	RecordNew(PUr);
	PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
	PUr.TransDate = CurrentDate;
	PUr.Location = location;
	PUVc_PasteTransDate(PUr,datewarnf,warnoldrecordsf,warnfutdatef);
	rownr = 0;
	
	while (TestEOF()==false) begin
		code = ImportField;
		qty = StringToInt(ImportField);
		cost = StringToVal(ImportField,M45Val);


		if (nonblank(code)) then begin

			PUrw.ArtCode = code;
			MatRowPut(PUr,rownr,PUrw);
			PUVc_PasteArtCode(PUr,rownr,warning,inwarn);
			MatRowGet(PUr,rownr,PUrw);
			PUrw.Quant = qty;
			PUrw.UPrice = cost;
    	PUrw.CostPrice = cost;
    	PUrw.Sum = cost*qty;		
			PUrw.Location = location;
      MatRowPut(PUr,rownr,PUrw);
			rownr = rownr + 1;
			if(rownr>999)then begin
				PUSumUp(PUr);
				RecordInsert(PUr,true);
				logtext(0,"PU Imported " & PUr.SerNr);
				RecordNew(PUr);
				PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
				PUr.TransDate = CurrentDate;
				PUr.Location = location;
				PUVc_PasteTransDate(PUr,datewarnf,warnoldrecordsf,warnfutdatef);
				rownr = 0;
			end;
		end;

		NextImportLine(true);
	end;
	PUSumUp(PUr);
	RecordInsert(PUr,true);
	
  
  LImportStockRemains2In:;
end;

global updating procedure ImportCUVcIn()
begin
  record CUVc NonameCUr,CUr,tmpCUr;
  string 10 notness;
  string 20 code;
  string 255 name,addres;
  string 60 addres1,addres2;
  string 100 phone;
  string 20 phone1,phone2;
  string 5 rebate;
  Date bd;
  val sum;
  integer pos;
  area tmparea;
  longint i;
  
  NextImportLine(true);
  NonameCUr.Code = "NONAME";
	readfirstmain(NonameCUr,1,true);
  
  while (!TestEOF()) begin
    i = i + 1;
    notness = ImportField;
    code = ImportField;
    if nonblank(code) then begin
      code = StrReplace(code,"?", "");
      code = StrReplace(code,"%", "");
      code = StrReplace(code,".", "");
      code = StrReplace(code," ", "_");
      name = ImportField;
      addres = ImportField;
      AddTextToArea(addres,tmparea);
      addres1 = "";
      addres2 = "";
      if GetAreaLength(tmparea)>60 then begin
        pos = 0;
        ExtractObjWithSeparator(",",addres,true,pos,addres1);
        addres1 = Trim(addres1);
        ExtractObjWithSeparator(",",addres,true,pos,addres2);
        addres2 = Trim(addres2);
      end else begin
        addres1 = addres;
      end;
      phone = ImportField;
      phone1 = "";
      phone2 = "";
      pos = 0;
      ExtractObjWithSeparator(";",phone,true,pos,phone1);
      if nonblank(phone1) then begin
        phone1 = StrReplace(phone1,";","");
        phone1 = StrReplace(phone1,"-","");
        phone1 = StrReplace(phone1," ","");
        phone1 = StrReplace(phone1,"(","");
        phone1 = StrReplace(phone1,")","");
        phone1 = StrReplace(phone1,"*","");
        switch (left(phone1,1)) begin
          case "+":
            phone1 = phone1;
          case "3":
            phone1 = "+" & phone1;
          case "8":
            phone1 = "+3" & phone1;
          case "0":
            phone1 = "+38" & phone1;
          otherwise
            phone1 = "+380" & phone1;
        end;
      end;
      ExtractObjWithSeparator(";",phone,true,pos,phone2);
      if nonblank(phone2) then begin
        phone2 = StrReplace(phone2,";","");
        phone2 = StrReplace(phone2,"-","");
        phone2 = StrReplace(phone2," ","");
        phone2 = StrReplace(phone2,"(","");
        phone2 = StrReplace(phone2,")","");
        phone2 = StrReplace(phone2,"*","");
        switch (left(phone2,1)) begin
          case "+":
            phone2 = phone2;
          case "3":
            phone2 = "+" & phone2;
          case "8":
            phone2 = "+3" & phone2;
          case "0":
            phone2 = "+38" & phone2;
          otherwise
            phone2 = "+380" & phone2;
        end;
      end;
      bd = StringToDate(ImportField);
      sum = StringToVal(ImportField,M4Val);
      rebate = ImportField & "%";
      
      CUr.Code = code;
      if readfirstmain(CUr,1,true) then begin
      end else begin
        RecordNew(CUr);
        RecordNew(tmpCUr);
        RecordCopy(CUr,NonameCUr);
        CUr.UUID = tmpCUr.UUID;
      end;
      CUr.Code = code;
      CUr.Name = name;
      CUr.InvAddr0 = addres1;
      CUr.InvAddr1 = addres2;
      CUr.Phone = phone1;
      CUr.AltPhone = phone2;
      CUr.BirthDate = bd;
      CUr.UserVal1 = sum;
      CUr.RebCode = rebate;
      RecordInsert(CUr,true);
    end;
    NextImportLine(true);
  end;
end;

global //Edit***************************Sasha2,15:21 11.08.2016 {
updating procedure ModifySerialNrIn()
begin
	record BarcodeVc Barcoder;
	string 60 barcode,partToChange,part,newSerial;
	Integer pos;

	//SetImportCodepage("CP1251");

	while (TestEOF()==false) begin
		barcode = ImportField;
		partToChange = ImportField;
		if (NonBlank(barcode)) then begin
		  Barcoder.Barcode = barcode;
		  if (ReadFirstMain(Barcoder,1,true)) then begin
		    pos = 0;
		    ExtractObjWithSeparator(".",Barcoder.SerialNr,true,pos,part);
		    newSerial = part;
		    ExtractObjWithSeparator(".",Barcoder.SerialNr,true,pos,part);
		    newSerial = newSerial & "." & part;
		    ExtractObjWithSeparator(".",Barcoder.SerialNr,true,pos,part);
		    newSerial = newSerial & "." & part;
		    ExtractObjWithSeparator(".",Barcoder.SerialNr,true,pos,part);
		    if (part!=partToChange) then begin
  		    newSerial = newSerial & "." & partToChange;
  		    //LogText(0,Barcoder.SerialNr & Chr(9) & newSerial);
  		    Barcoder.SerialNr = newSerial;
  		    RECORDSTORE(Barcoder,true);
		    end;
		  end;
		end;

		NextImportLine(true);
		
	end;  
end; //Edit***************************Sasha2,15:22 11.08.2016 }

global //Edit***************************Sasha2,12:45 27.02.2017 {
updating procedure RetIVMismatchIn()
begin
	record ItemHistVc IHr,sourceIHr;	
	string 255 artcode,serialNr;
	Boolean TrHs,testf,foundf,TrHs1,testf1,foundf1;
	area armes;
	string 10 nextline;
	LongInt IVSerNr;
	record IVVc sourceIVr,targetIVr;
	row IVVc sourceIVrw,targetIVrw;

	//SetImportCodepage("CP1251");
	nextline = chr(13) & chr(10);

	while (TestEOF()==false) begin
		artcode = ImportField;
		serialNr = ImportField;
		IVSerNr = StringToLongInt(ImportField);
		
    if (IVSerNr>-1) then begin
      sourceIHr.TransNr = IVSerNr;
  		sourceIHr.FileName = "IVVc";
  		TrHs1 = true;
  		foundf1 = false;
  		while (LoopKey("FNTransNr",sourceIHr,2,TrHs1)) begin
  		  testf1 = true;
  		  if (sourceIHr.TransNr!=IVSerNr or sourceIHr.FileName!="IVVc") then begin testf1 = false; TrHs1 = false; end;
  		  if (sourceIHr.ArtCode!=artcode or sourceIHr.SerialNr!=serialNr) then begin testf1 = false; end;
  		  if (testf1) then begin
    		  IHr.ArtCode = artcode;
    		  IHr.SerialNr = serialNr;
    		  IHr.FileName = "IVVc";
    		  IHr.SerNr = sourceIHr.SerNr;
    		  TrHs = true;
    		  foundf = false;
    		  while (LoopKey("ArtCodeSerialNr",IHr,4,TrHs)) begin
    		    testf = true;
    		    if (IHr.ArtCode!=artcode or IHr.SerialNr!=serialNr or IHr.FileName!="IVVc") then begin TrHs = false; testf = false; end;
    		    if (IHr.Qty<0) then begin testf = false; end;
    		    if (testf) then begin
    		      targetIVr.SerNr = IHr.TransNr;
    		      ReadFirstMain(targetIVr,1,true);
    		      MatRowGet(targetIVr,IHr.Row,targetIVrw);
    		      if (targetIVrw.RetIVNum==sourceIHr.TransNr and targetIVrw.RetIVRow==sourceIHr.Row) then begin
    		        AddStringToArea("Source IHr.ArtCode:" & sourceIHr.ArtCode & ", serialNr:" & sourceIHr.SerialNr & ", IHr.Transnr:" & IVSerNr & ", IHr.SerNr:" & sourceIHr.SerNr & nextline,armes);
    		        TrHs1= false;
  		          foundf1 = true;
      		      foundf = true;
      		      TrHs = false;
      		      if (AbsoluteVal(sourceIHr.TotCostPrice/sourceIHr.Qty)!=AbsoluteVal(IHr.TotCostPrice/IHr.Qty)) then begin
        		      AddStringToArea("Target IHr.ArtCode:" & IHr.ArtCode & ", serialNr:" & IHr.SerialNr & ", IHr.SerNr:" & IHr.SerNr & nextline,armes);
        		      AddStringToArea("source cost:" & AbsoluteVal(sourceIHr.TotCostPrice/sourceIHr.Qty) & ", target cost:" & AbsoluteVal(IHr.TotCostPrice/IHr.Qty) & nextline,armes);
        		    end else begin
        		      AddStringToArea("good" & nextline,armes);
      		      end;
    		      end;     
    		    end;
    		  end; RESETLOOP(IHr);
    		  if (foundf==false) then begin
    		    AddStringToArea("----------Target not found IHr.ArtCode:" & artcode & ", serialNr:" & serialNr & nextline,armes);
    		  end;
  		  end;
  		end; RESETLOOP(sourceIHr);
  		if (foundf1==false) then begin
  		  AddStringToArea("not found source IHr.ArtCode:" & artcode & ", serialNr:" & serialNr & ", IHr.Transnr:" & IVSerNr & nextline,armes);
  		end;
  		AddStringToArea("======================================" & nextline,armes);
    end;
		

		NextImportLine(true);
	end;
	
	WriteAreaToFile	(armes,"miscoincidence.txt",0);

  
end; //Edit***************************Sasha2,12:45 27.02.2017 }