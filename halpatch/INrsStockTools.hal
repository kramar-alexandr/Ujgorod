external function roundmode SetRoundModeD(Integer);
forward function Boolean ShouldInvoiceRowUpdateStock(record IVVc,row IVVc);
external procedure FindTempStockRow(LongInt,string,Boolean,record TempStockVc,var row TempStockVc);
external function Integer WAPerLocation(record INVc,record ITVc,record CostAccBlock);
external function Integer FIFOPerLocation(record INVc,record ITVc,record CostAccBlock);
external function Integer GetFIFOPerSerialNr(record INVc,record ITVc,record CostAccBlock);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external procedure GetCostModel(record INVc,record CostAccBlock,var record ITVc,var Integer,var Integer,Boolean);
external updating procedure InvalidateItemHistVc(string,LongInt,Integer);
external procedure RoundRowSum(string,string,string,var val);
external updating procedure StoreItemHistory_In_CreditInvoice(Integer,record CostAccBlock,record MainStockBlock,record IVVc,row IVVc,Integer,record INVc,record TempStockVc,Boolean);
external function val CreditedInvoiceRowFIFORowVal(record INVc,string,Integer,LongInt,string,LongInt,string,val,Integer,val);
external function val CalculateQty2(val,val);
external updating procedure RetPUStoreItemHistory_Out(record MainStockBlock,record CostAccBlock,record RetPUVc,row RetPUVc,Integer,Integer,record TempStockVc,Boolean);
external updating procedure UpdateBatchBestBefore(string,string,string,Date,Date,val,val,val,Integer,Integer,Boolean,
                                                  string,string,string,string,string,string,string,string,
                                                  string,string,string,string,string,string,string,string, string,string);
external updating procedure RetStoreItemHistory_In(record INVc,record MainStockBlock,record CostAccBlock,record RetVc,row RetVc,Integer,Integer,record TempStockVc,Boolean);
external updating procedure StockMovStoreItemHistory_In(record MainStockBlock,string,string,string,string,string,Date,val,val,val,LongInt,Integer,Integer,string,record TempStockVc,Boolean);
external updating procedure StoreItemHistory_In(record MainStockBlock,string,string,string,string,Date,Date,val,val,val,LongInt,Integer,Integer,string,string,record TempStockVc,Boolean);
external updating procedure StoreItemHistory_Out(record MainStockBlock,string,string,string,string,Date,val,val,val,LongInt,Integer,Integer,string,record TempStockVc,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external updating procedure LockRecipe(string);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external updating procedure UpdateSerStock(string,string,string,val,val);
external updating procedure UpdateInternalSerStock(string,string,string,val,val);
 

updating procedure SRPriceRowUpdateItemHist(record SRPriceVc SRPricep,string loc2,row SRPriceVc SRPricerw,Integer i,val qty,string serialnr,record INVc INr,record TempStockVc TSr,Boolean usetmpstkf)
begin
  record ItemHistVc IHr;
  record CostAccBlock CAb;
  record ITVc ITr;
  Integer primary,queuecostmodel;
  row TempStockVc TSrw;

  BlockLoad(CAb);
  RecordNew(IHr);
  IHr.ArtCode = SRPricerw.ArtCode;
  IHr.Variety = "";
  if (ReadFirstItem(SRPricerw.ArtCode,INr,false,false)) then begin
    if (SRPricerw.ArtCode!=INr.Code) then begin
      IHr.Variety = right(SRPricerw.ArtCode,len(SRPricerw.ArtCode)-len(INr.Code));
      IHr.ArtCode = INr.Code;
    end;
  end;
  IHr.Location = loc2;
	IHr.FileName = "SRPriceVc";
	IHr.StockAffectf = 0;

  IHr.TransNr = SRPricep.SerNr;
  IHr.TransDate = SRPricep.TransDate;
  IHr.FIFODate = SRPricep.TransDate;
  IHr.Qty = 1;
  IHr.Qty2 = 1;
  IHr.Row = i;
  IHr.RemQty = blankval;
  IHr.Source = -1;
  IHr.TotCostPrice = blankval;
  IHr.RemCostPrice = blankval;
  IHr.SerialNr = serialnr;

  IHr.SerNr = NextSerNr("ItemHistVc",IHr.TransDate,-1,false,"");    
  if (RecordStore(IHr,true)) then begin end;;
  return;
end;

global
updating procedure SRPriceUpdateItemHist2(record SRPriceVc SRPricep,record TempStockVc TSr,Boolean usetmpstkf)
begin
  record INVc INr;
  row SRPriceVc SRPricerw;
  Integer rwcnt,i,j;
  Boolean save;
  string 255 location;
  string 255 loc2;
  record SHVc SHr;
  val t;
  record MainStockBlock MSb;
  record SerNrTrackBlock SNrb;
  string 255 serialnr;
  val qty;
  
  BlockLoad(SNrb);
  BlockLoad(MSb);
  location = SRPricep.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(SRPricep);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SRPricep,i,SRPricerw);
    if(nonblank(SRPricerw.ArtCode))then begin
			loc2 = SRPricerw.Location;
			if (blank(loc2)) then begin
				loc2 = location;
			end;
			if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
				qty = blankval;
				serialnr = FirstInRange(SRPricerw.SerialNr,60);
				while (nonblank(serialnr)) begin
					SRPriceRowUpdateItemHist(SRPricep,loc2,SRPricerw,i,1.00,serialnr,INr,TSr,usetmpstkf);
					qty = qty + 1;
					serialnr = NextSerialNumber(SRPricerw.ArtCode,serialnr,SNrb);
					if (qty>=SRPricerw.Qty) then begin serialnr = ""; end;
				end;
			end else begin          
				SRPriceRowUpdateItemHist(SRPricep,loc2,SRPricerw,i,SRPricerw.Qty,SRPricerw.SerialNr,INr,TSr,usetmpstkf);
			end;
    end;
  end;
  return;
end;

global
updating procedure SRPriceUpdateItemHist(record SRPriceVc SRPricep)
begin
  record TempStockVc TSr;
  
  SRPriceUpdateItemHist2(SRPricep,TSr,false);
  return;
end;

global
updating procedure SRPriceRemoveItemHist(record SRPriceVc SRPricep)
begin
  record ItemHistVc IHr;
  Boolean foundf;
  
  foundf = true;
  IHr.FileName = "SRPriceVc";
  IHr.TransNr = SRPricep.SerNr;
  while (LoopKey("FNTransNr",IHr,2,foundf)) begin
    if (IHr.FileName!="SRPriceVc") then begin
      foundf = false;
    end;
    if (IHr.TransNr!=SRPricep.SerNr) then begin
      foundf = false;
    end;
    if (foundf) then begin
      RecordRemove(IHr);
      StepBack(IHr);
    end;
  end;
  return;
end;
