external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function roundmode SetRoundModeD(Integer);
external function Boolean LoggedInTest();
external function string 255 ChangeCaseStr(string,integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val AbsoluteVal(val);
external function string 255 StrReplace(string,string,string);
external procedure ExtractObj(string,var Integer,var string);

webpublic
global procedure WebMyLogIn()
begin
  Time checkTime;
  array string 5 checkTimeStr;
  string 255 sentMD5,checkMD5,link;
  integer deltaMin,i,cti;
  boolean isLogedIn;
  
  deltaMin = 2;
  sentMD5 = WebGetArg("param");
  link = WebGetArg("link");
  checkTime = CurrentTime;
  cti = 0;
  checkTimeStr[cti] = GetHour(checkTime) & ":" & GetMinute(checkTime);
  cti = cti + 1;
  for (i=1;i<deltaMin;i=i+1) begin
    checkTimeStr[cti] = GetHour(checkTime) & ":" & (GetMinute(checkTime) + i);
    cti = cti + 1;
    checkTimeStr[cti] = GetHour(checkTime) & ":" & (GetMinute(checkTime) - i);
    cti = cti + 1;
  end;
  for (i=0;i<checkTimeStr.length;i=i+1) begin
    checkMD5 = MD5String(checkTimeStr[i]);
    if (sentMD5==checkMD5) then begin
      isLogedIn = true;
      i = checkTimeStr.length;
    end;
  end;
  isLogedIn = LoggedInTest();
  if isLogedIn then begin
    WebOutString(MD5String(GetHour(checkTime) & ":" & GetMinute(checkTime)));
  end;
  return;
end;

webpublic
global procedure WebSales()
begin
	record DIVc DIr;
  record IVVc IVr;
  row IVVc IVrw;
	record INVc INr;
	boolean TrHs,testf;
	vector string 100 vClass,vName;
	string 100 type,brand,tstr;
	integer pos;
	vector val vSum,vBrandSum;
	array string 50 aTags;
  vector boolean vTagExist,vBarndInArr;
	integer i,mtrw,b,t,cti;
  string 5 nl,tab;
  array string 50 aBrand,aBrandTmp;
  area log;
  
  Date mydate,sd,ed;
  Time checkTime;
  array string 5 checkTimeStr;
  string 255 sentMD5,checkMD5,loc;
  integer deltaMin;
  boolean isLogedIn;

  deltaMin = 2;
  sentMD5 = WebGetArg("param");
  // -------NEW-------
  loc = WebGetArg("loc");
	sd = StringToDate(WebGetArg("sd"));
  ed = StringToDate(WebGetArg("ed"));
  // -------OLD-------
  mydate = currentdate;
  //mydate = StringToDate("1/8/2016");
  sd = StringToDate("01/" & GetMonth(mydate) & "/" & GetYear(mydate));
  ed = StringToDate(DaysInMonth(GetYear(mydate), GetMonth(mydate)) & GetMonth(mydate) & "/" & GetYear(mydate));
  loc = "";
  if (CurrentUser!= "SA") and (CurrentUser!= "SA_") then begin
	SetAreaZeroSize(log);
	AddTextToArea(CurrentDate & " " & CurrentTime & " " & CurrentUser & " - SaleStat.html" & chr(13) & chr(10),log);
	writeareatofile(log,"web.log",1);
  end;
  
  checkTime = CurrentTime;
  cti = 0;
  checkTimeStr[cti] = GetHour(checkTime) & ":" & GetMinute(checkTime);
  cti = cti + 1;
  for (i=1;i<deltaMin;i=i+1) begin
    checkTimeStr[cti] = GetHour(checkTime) & ":" & (GetMinute(checkTime) + i);
    cti = cti + 1;
    checkTimeStr[cti] = GetHour(checkTime) & ":" & (GetMinute(checkTime) - i);
    cti = cti + 1;
  end;
  isLogedIn = false;
  for (i=0;i<checkTimeStr.length;i=i+1) begin
    checkMD5 = MD5String(checkTimeStr[i]);
    if (sentMD5==checkMD5) then begin
      isLogedIn = true;
      i = checkTimeStr.length;
    end;
  end;
  if isLogedIn then begin
  
    nl = chr(13) & chr(10);
    tab = ",";
    WebOutString("Brand" & tab & "Type" & tab & "Sum" & nl);
    resetloop(DIr);
    while(loopmain(DIr,1,true))begin
      vClass[DIr.Code] = DIr.CType;
      vName[DIr.Code] = DIr.Name;
    end;
    
    resetloop(IVr);
    TrHs = true;
    t = 0;
    IVr.InvDate = sd;
    while(loopkey("InvDate",IVr,1,TrHs))begin
      testf = true;
      if (DateInRange(IVr.InvDate,sd,ed)==false) then begin TrHs = false; testf = false; end;
      if (nonblank(loc) and (IVr.Location!=loc)) then begin testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        mtrw = matrowcnt(IVr);
        for (i=0;i<mtrw;i=i+1) begin
          matrowget(IVr,i,IVrw);
          if (IVrw.Sum!=0) then begin
            if (IVrw.stp==kInvoiceRowTypeNormal) then begin
              INr.Code = IVrw.ArtCode;
              readfirstmain(INr,1,true);
              type = "UNKNOWN";
              brand = "UNKNOWN";
              tstr = "";
              pos = 0;
              ExtractObjWithSeparator(",",INr.DispGroups,true,pos,tstr);
              while(nonblank(tstr))begin
                if(nonblank(tstr))then begin
                  if(vClass[tstr]=="TYPE")then begin
                    type = vName[tstr];
                  end;
                  if(vClass[tstr]=="BRAND")then begin
                    brand = vName[tstr];
                    if !vBarndInArr[brand] then begin
                      aBrand[b] = brand;
                      vBarndInArr[brand] = true;
                      b = b + 1;
                    end;
                  end;
                end;
                ExtractObjWithSeparator(",",INr.DispGroups,true,pos,tstr);
              end;
              vSum[brand & ";" & type] = vSum[brand & ";" & type] + IVrw.Sum;
              vBrandSum[brand] = vBrandSum[brand] + IVrw.Sum;
            end;
          end;
        end;
      end;
    end;
    GetVectorTags(vSum,aTags);
    for (i=0;i<aTags.length;i=i+1) begin
      vTagExist[aTags[i]] = true;
    end;
    
    for (b=0;b<aBrand.length-1;b=b+1) begin
      for (i=0;i<aBrand.length-1;i=i+1) begin
        if (vBrandSum[aBrand[i]] < vBrandSum[aBrand[i+1]]) then begin
          tstr = aBrand[i+1];
          aBrand[i+1] = aBrand[i];
          aBrand[i] = tstr;
        end;
      end;
    end;
    for (i=0;i<aBrand.length;i=i+1) begin
      aBrandTmp[i] = aBrand[i];
      vBarndInArr[aBrand[i]] = false;
    end;
    ClearArray(aBrand);
    for (i=0;i<10;i=i+1) begin
      aBrand[i] = aBrandTmp[i];
      vBarndInArr[aBrand[i]] = true;
    end;
    for (i=0;i<aTags.length;i=i+1) begin
      if (vSum[aTags[i]]!=0) then begin
        pos = 0;
        ExtractObjWithSeparator(";",aTags[i],true,pos,brand);
        if vBarndInArr[brand] then begin
          ExtractObjWithSeparator(";",aTags[i],true,pos,type);
          WebOutString(ChangeCaseStr(brand,4) & tab & ChangeCaseStr(type,4) & tab & vSum[aTags[i]]*100 & nl);
        end;
      end;
    end;
  end;
  return;
end;

webpublic
global procedure WebLoadPeriods()
begin
  record PeriodBlock PeriodRec;
  row PeriodBlock Periodrw;
  Integer i,rwcnt;
  string 5 nl,delim;
  boolean firstf;
  
  nl = chr(13) & chr(10);
  delim = ",";
  firstf = true;
  
  BlockLoad(PeriodRec);
  rwcnt = MatRowCnt(PeriodRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PeriodRec,i,Periodrw);
    if (firstf) then begin
      firstf = false;
      WebOutString(Periodrw.FromDate & ":" & Periodrw.ToDate);
    end else begin
      WebOutString(nl & Periodrw.FromDate & ":" & Periodrw.ToDate);
    end;
  end;  

  return;
end;

webpublic
global procedure WebLoadLocations()
begin
  record LocationVc Locr;
	string 5 nl,delim;
  boolean firstf;
  
  nl = chr(13) & chr(10);
  delim = ",";
  firstf = true;
  
  Locr.Code = "";
  while(loopmain(Locr,1,true))begin
    if (firstf) then begin
      firstf = false;
      WebOutString(Locr.Code);
    end else begin
      WebOutString(nl & Locr.Code);
    end;
  end;

  return;
end;

webpublic
global procedure WebLoadItems()
begin
  record INVc INr;
	string 5 nl,delim;
  boolean firstf;
  
  nl = chr(13) & chr(10);
  delim = ",";
  firstf = true;
  
  INr.Code = "";
  while(loopmain(INr,1,true))begin
    if (firstf) then begin
      firstf = false;
      WebOutString(INr.Code);
    end else begin
      WebOutString(nl & INr.Code);
    end;
  end;

  return;
end;

webpublic global
procedure WebSaleReport()
begin
  record IVVc IVr;
  row IVVc IVrw;
  record SysFormatBlock SysFormatRec;
  integer i,rwcnt,pos;
  boolean TrHs,testf,testf1,firstf;
  val fr,tb1,tb2,br1,br2,
      price,sum,cost,profit,cred;
  Date sd,ed;
  area log;
  string 15 sdnf,ednf,y,d,m;
  
  string 5 nl,delim;
  Time checkTime;
  array string 5 checkTimeStr;
  string 255 sentMD5,checkMD5;
  integer deltaMin,cti;
  boolean isLogedIn;

  if (CurrentUser!= "SA") and (CurrentUser!= "SA_") then begin
    SetAreaZeroSize(log);
    AddTextToArea(CurrentDate & " " & CurrentTime & " " & CurrentUser & " - SaleStat.html" & chr(13) & chr(10),log);
    writeareatofile(log,"web.log",1);
  end;
  deltaMin = 2;
  sentMD5 = WebGetArg("param");
  checkTime = CurrentTime;
  cti = 0;
  checkTimeStr[cti] = GetHour(checkTime) & ":" & GetMinute(checkTime);
  cti = cti + 1;
  for (i=1;i<deltaMin;i=i+1) begin
    checkTimeStr[cti] = GetHour(checkTime) & ":" & (GetMinute(checkTime) + i);
    cti = cti + 1;
    checkTimeStr[cti] = GetHour(checkTime) & ":" & (GetMinute(checkTime) - i);
    cti = cti + 1;
  end;
  for (i=0;i<checkTimeStr.length;i=i+1) begin
    checkMD5 = MD5String(checkTimeStr[i]);
    if (sentMD5==checkMD5) then begin
      isLogedIn = true;
      i = checkTimeStr.length;
    end;
  end;
  isLogedIn = LoggedInTest();
  if isLogedIn then begin
    BlockLoad(SysFormatRec);
    nl = chr(13) & chr(10);
    delim = ",";
    firstf = true;
    
    sdnf = WebGetArg("sd");
    pos = 0;
    ExtractObjWithSeparator("-",sdnf,true,pos,y);
    ExtractObjWithSeparator("-",sdnf,true,pos,m);
    ExtractObjWithSeparator("-",sdnf,true,pos,d);
    sd = StringToDate(d & "/" & m & "/" & y);
    ednf = WebGetArg("ed");
    pos = 0;
    ExtractObjWithSeparator("-",ednf,true,pos,y);
    ExtractObjWithSeparator("-",ednf,true,pos,m);
    ExtractObjWithSeparator("-",ednf,true,pos,d);
    ed = StringToDate(d & "/" & m & "/" & y);
    TrHs = true;
    IVr.InvDate = sd;
    while (LoopKey("InvDate",IVr,1,TrHs)) begin
      testf = true;
      if (DateInRange(IVr.InvDate,sd,ed)==false) then begin TrHs = false; testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        fr = IVr.FrRate;
        tb1 = IVr.ToRateB1;
        tb2 = IVr.ToRateB2;
        br1 = IVr.BaseRate1;
        br2 = IVr.BaseRate2;
        cred = 1;		
        if(IVr.InvType==kInvoiceTypeCredit)then begin
          cred = -1;			
        end;	
        rwcnt = MatRowCnt(IVr);
        for(i=0;i<rwcnt;i=i+1) begin
          testf1 = true;
          MatRowGet(IVr,i,IVrw);
          if (IVrw.stp!=kInvoiceRowTypeNormal) then begin testf1 = false; end;
          if (IVr.Invalid<>0) then begin testf = false; end;
          if (blank(IVrw.ArtCode)) then begin testf1 = false; end;
          if (blank(IVrw.Quant)) then begin testf1 = false; end;
          if (IVrw.Quant==0) then begin testf1 = false; end;
          if (testf1) then begin
            price = MulRateToBase1(IVr.CurncyCode,IVrw.Price,fr,tb1,tb2,br1,br2,DefaultCurRoundOff);
            sum = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,fr,tb1,tb2,br1,br2,DefaultCurRoundOff)*cred;
            cost = IVrw.FIFORowVal;
            profit = (AbsoluteVal(sum) - AbsoluteVal(cost))*cred;
            if (cost==0) or (cost==blankval) then begin
              cost = IVrw.BasePrice*IVrw.Quant;
            end;
            //IVrw.ArtCode
            if (firstf) then begin
              firstf = false;
              WebOutString(IVr.InvDate & delim & IVrw.Spec & delim & IVrw.SerialNr & delim & ValToString(IVrw.Quant*cred,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,1) & delim & price & delim & sum & delim & cost & delim & profit);
            end else begin
              WebOutString(nl & IVr.InvDate & delim & IVrw.Spec & delim & IVrw.SerialNr & delim & ValToString(IVrw.Quant,M4Val*cred,SysFormatRec.thousSep,SysFormatRec.decimalPt,1) & delim & price & delim & sum & delim & cost & delim & profit);
            end;
          end;
        end;
      end;
    end;
  end;
  
  return;
end;

webpublic global
procedure WebItemStatusReport()
begin
  record ItemHistVc IHr;
  record VARVc VARr;
  record LocationVc Locr;
  record SRPriceVc SRPricer;
  record PLVc PLr;
  row SRPriceVc SRPricerw;
  string 255 item,serial,loc,artcode,color,size,collection;
  string 5 nl,delim;
  boolean TrHs,testf,firstf;
  integer i,pos;
  area log;
  vector val ItemSerialLocQty,ItemSerialLocPrice;
  vector string 255 PureSerial;
  array string 255 aTags;
  
  if (CurrentUser!= "SA") and (CurrentUser!= "SA_") then begin
    SetAreaZeroSize(log);
    AddTextToArea(CurrentDate & " " & CurrentTime & " " & CurrentUser & " - SaleStat.html" & chr(13) & chr(10),log);
    writeareatofile(log,"web.log",1);
  end;

  nl = chr(13) & chr(10);
  delim = ",";
  firstf = true;
  item = WebGetArg("item");
  IHr.ArtCode = item;
  TrHs = true;
  while (LoopKey("ActiveQty",IHr,1,TrHs)) begin
    testf = true;
    serial = "";
    if (IHr.ArtCode!=item) then begin
      TrHs = false;
      testf = false;
    end;
    if (IHr.StockAffectf!=1) then begin
      testf = false;
    end;
    if (testf) then begin
      serial = StrReplace(IHr.SerialNr,"..", ".OS.");
      serial = StrReplace(serial,"..", ".OS.");
      if (right(serial,1) == ".") then begin
        serial = serial & "OS";
      end;
      ItemSerialLocQty[serial & ";" & IHr.Location] = ItemSerialLocQty[serial & ";" & IHr.Location] + IHr.RemQty;
      PureSerial[serial] = IHr.SerialNr;
    end;
  end;
  resetloop(IHr);
  IHr.ArtCode = item;
  TrHs = true;
  while (LoopKey("ArtCodeFD",IHr,1,TrHs)) begin
    if (IHr.ArtCode!=item) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      serial = "";
      SRPricer.SerNr = IHr.TransNr;
      if (readfirstmain(SRPricer,1,true)) then begin
        serial = StrReplace(IHr.SerialNr,"..", ".OS.");
        serial = StrReplace(serial,"..", ".OS.");
        if (right(serial,1) == ".") then begin
          serial = serial & "OS";
        end;
        matrowget(SRPricer,IHr.Row,SRPricerw);
        ItemSerialLocPrice[serial & ";" & SRPricer.Location] = SRPricerw.NewFIFO;
      end;
    end;
  end;
  
  GetVectorTags(ItemSerialLocQty,aTags);
  for (i=0;i<aTags.length;i=i+1) begin
    if (ItemSerialLocQty[aTags[i]]!=0) then begin
      serial = "";
      loc = "";
      artcode = "";
      color = "";
      size = "";
      collection = "";
      pos = 0;
      ExtractObjWithSeparator(";",aTags[i],true,pos,serial);
      ExtractObjWithSeparator(";",aTags[i],true,pos,loc);
      Locr.Code = loc;
      readfirstmain(Locr,1,true);
      loc = Locr.Name;
      pos = 0;
      ExtractObjWithSeparator(".",serial,true,pos,artcode);
      ExtractObjWithSeparator(".",serial,true,pos,color);
      ExtractObjWithSeparator(".",serial,true,pos,size);
      ExtractObjWithSeparator(".",serial,true,pos,collection);
      if (color!="OS") then begin
        VARr.Code = color;
        ReadFirstMain(VARr,1,true);
        color = VARr.Comment;
      end else begin
        color = ChangeCaseStr(USetStr(11172),2);
      end;
      if (size!="OS") then begin
        VARr.Code = size;
        ReadFirstMain(VARr,1,true);
        size = VARr.Comment;
      end else begin
        size = ChangeCaseStr(USetStr(11172),2);
      end;
      
      PLr.SerialNr = PureSerial[serial];
      PLr.PLCode = "RRP";
      readfirstkey("SerialNr",PLr,2,true);
      
      if (firstf) then begin
        firstf = false;
        WebOutString(loc & delim & color & delim & size & delim & collection & delim & ItemSerialLocQty[aTags[i]] & delim & PLr.ExVatPrice);
      end else begin
        WebOutString(nl & loc & delim & color & delim & size & delim & collection & delim & ItemSerialLocQty[aTags[i]] & delim & PLr.ExVatPrice);
      end;
    end;
  end;
  
  return;
end;

webpublic global
procedure WebItemInfo()
begin
  record INVc INr;
  record DIVc DIr;
  string 255 item,info,tstr;
  string 5 nl,delim;
  integer pos;
  
  nl = chr(13) & chr(10);
  delim = ",";
  
  item = WebGetArg("item");
  info = ChangeCaseStr(WebGetArg("info"),2);
  switch (info) begin
    case "exist":
      INr.Code = item;
      if (ReadFirstMain(INr,1,true)) then begin
        WebOutString("true");
      end;
    case "name":
      INr.Code = item;
      ReadFirstMain(INr,1,true);
      WebOutString(INr.Name);
    case "brand":
      INr.Code = item;
      ReadFirstMain(INr,1,true);
      pos = 0;
      ExtractObj(INr.DispGroups,pos,tstr);
      while (NonBlank(tstr)) begin
        DIr.Code = tstr;
        ReadFirstMain(DIr,1,true);
        if (DIr.CType=="BRAND") then begin
          WebOutString(DIr.Name);
          pos = len(INr.DispGroups);
        end;
        ExtractObj(INr.DispGroups,pos,tstr);
      end;
    case "type":
      INr.Code = item;
      ReadFirstMain(INr,1,true);
      pos = 0;
      ExtractObj(INr.DispGroups,pos,tstr);
      while (NonBlank(tstr)) begin
        DIr.Code = tstr;
        ReadFirstMain(DIr,1,true);
        if (DIr.CType=="TYPE") then begin
          WebOutString(DIr.Name);
          pos = len(INr.DispGroups);
        end;
        ExtractObj(INr.DispGroups,pos,tstr);
      end;
  end;
  
  
  return;
end;