external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external procedure SerialNrDimensions(string,string,var val,var val,var val);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean BulkSerialNos_CalculateQuantityAndSerialNr(record SerNrTrackBlock,Boolean,string,var string,var val);
external function string 60 AddObjectToObjectList(string,string);
external procedure NormalizeObjstr(var string);
external procedure GetACShortAccount(string,var string,var string);
external procedure SRPriceSumUp(var record SRPriceVc);
external function string 255 FindINObjects(string,string);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function val FindSerialNrQty(string,string,string); //Edit***************************Sasha2,14:59 07.07.2016
global  
function string 255 FindPurchaseInvoiceNrForSerialNr(string artcode,string serialnr,var LongInt orgvir,var LongInt orgvirow)
begin
  string 255 res;
  record ItemHistVc IHr;
  record PUVc PUr;
  row PUVc PUrw;
  record VIVc VIr;
  row VIVc VIrw;
  Integer i,rwcnt;
  Boolean found;
  
  if (nonblank(serialnr)) then begin
    IHr.ArtCode = artcode;
    IHr.SerialNr = serialnr;
    IHr.FileName = "PUVc";
    found = ReadFIrstKey("ArtCodeSerialNr",IHr,3,true);
    if (found) then begin
      PUr.SerNr = IHr.TransNr;
      if (ReadFirstMain(PUr,1,true)) then begin
        if (PUr.PONr>0) then begin
          found = true;
          VIr.POSerNr = PUr.PONr;
          while (LoopBackKey("POSerNr",VIr,1,found)) begin
            if (VIr.POSerNr!=PUr.PONr) then begin found = false; end;
            if (found) then begin
              rwcnt = MatRowCnt(VIr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(VIr,i,VIrw);
                if (VIrw.PUNr==PUr.SerNr) and (VIrw.PURow==IHr.Row) then begin
                  res = VIr.InvoiceNr;
                  if (blank(res)) then begin
                    res = USetStr(1152) & ":" & VIr.SerNr;
                  end;
                  orgvir = VIr.SerNr;
                  orgvirow = i;
                  goto LFindPurchaseInvoiceNrForSerialNr;
                end;
              end;
            end;
          end;
        end else begin
//          MatRowGet(PUr,IHr.Row,PUrw);
//what if PUrch Invoice without PO ? 
        end;
      end;
    end;
  end else begin
  end;
LFindPurchaseInvoiceNrForSerialNr:;  
  FindPurchaseInvoiceNrForSerialNr = res;
  return;
end;

//Edit***************************Sasha2,15:24 08.07.2016 {
global
procedure FindLastCostPriceForArtCode(record SRPriceVc SRr,row SRPriceVc SRrw,string artCode,string serial,string location,var val lastcostprice,var string cur)
begin
  record ItemHistVc IHr;
  record PUVc PUr;
  Boolean TrHs,testf;
  Integer keycnt;
  string 20 keyname;
  
    if (SRr.PUNr>-1) then begin
      lastcostprice = SRrw.LastCostPrice;
      cur = SRrw.CurncyCode;
    end else begin
      lastcostprice = BlankVal;
      cur = "";
      /*if (blank(location)) then begin
        goto LFindLastCostPriceForArtCode;
      end;*/
      
      if (NonBlank(serial)) then begin
        IHr.ArtCode = artCode;
        IHr.SerialNr = serial;
        IHr.FileName = "PUVc";
        keyname = "ArtCodeSerialNr";
      end else begin
        IHr.FileName = "PUVc";
        IHr.ArtCode = artCode;
        IHr.TransDate = CurrentDate;
        keyname = "FNArtCode";
      end;
      TrHs = true;
      RESETLOOP(IHr);
      while (LoopBackKey(keyname,IHr,3,TrHs)) begin
        testf = true;
        if (IHr.FileName!="PUVc" or IHr.ArtCode!=artCode) then begin TrHs = false; testf = false; end;
        if (NonBlank(serial) and IHr.SerialNr!= serial) then begin TrHs = false; testf = false; end;
        //if (IHr.Location!=location) then begin testf = false; end;
        if (testf) then begin
          lastcostprice = IHr.TotCostPrice/IHr.Qty;
          PUr.SerNr = IHr.TransNr;
          if (ReadFirstMain(PUr,1,true)) then begin
            cur = PUr.CurncyCode;
          end;
          TrHs = false;
        end;
      end;
    end;
    
    
LFindLastCostPriceForArtCode:;
    
  return;
end; //Edit***************************Sasha2,15:24 08.07.2016 }

//Edit***************************Sasha2,15:23 08.07.2016 {
procedure FindPriceInPlAndUpdDiffs(var row SRPriceVc SRrw,string artCode,string serial,record SRPriceVc SRr,boolean recalcPLPricef)
begin
  record PLVc PLr;
  val rebate,markup,rate,tval; 
  roundmode rnd1,rnd2;
    
    rnd1.decimals = 0;
    rnd1.step = kRoundingStep5;
    
    rnd2.decimals = 0;
    if (SRr.PriceRoundingf==0) then begin
      rnd2.step = kRoundingStep5;
    end else begin
      rnd2.step = kRoundingStepNone;
    end;
    
    if (recalcPLPricef) then begin
      PLr.SerialNr = serial;
      PLr.PLCode = "RRP";
      PLr.ArtCode = artCode;
      ReadFirstKey("SerialNr",PLr,3,true);
      if (PLr.ExVatPrice!=BlankVal and PLr.SerialNr==serial) then begin
        SRrw.PLPrice = PLr.ExVatPrice;
      end else begin
        SRrw.PLPrice = 0;
      end;
    end;
    
    if (NonBlank(SRrw.Rebate)) then begin
      rebate = SRrw.Rebate; 
    end else begin
      rebate = SRr.HeaderRebate;
    end;
    if (NonBlank(SRrw.MarkUp)) then begin
      markup = SRrw.MarkUp; 
    end else begin
      markup = SRr.HeaderMarkUp;
    end;
    if (NonBlank(SRrw.Rate)) then begin
      rate = SRrw.Rate; 
    end else begin
      rate = SRr.HeaderRate;
    end;
    if (SRr.CalcPriceFromCostf==0) then begin
      SRrw.FIFO = SRrw.PLPrice + (SRrw.PLPrice/100*markup);
    end else begin
      tval = SRrw.LastCostPrice * rate;
      SRrw.FIFO = tval + (tval/100*markup);
    end;
    SRrw.FIFO = Round(SRrw.FIFO,rnd1);
    SRrw.NewFIFO = SRrw.FIFO - (SRrw.FIFO/100*rebate);
    SRrw.NewFIFO = Round(SRrw.NewFIFO,rnd2);
    SRrw.NewFIFORowVal = SRrw.Qty*SRrw.NewFIFO;
    SRrw.DiffFIFO = SRrw.NewFIFO - SRrw.FIFO;
    SRrw.FIFORowVal = SRrw.Qty*SRrw.FIFO;
    SRrw.DiffFIFORowVal = SRrw.NewFIFORowVal - SRrw.FIFORowVal;

    //SRrw.FIFO = BlankVal;
    //SRrw.DiffFIFO = BlankVal; 
    //SRrw.FIFORowVal = BlankVal;
  
  return;
end; //Edit***************************Sasha2,15:23 08.07.2016 }
  
global  
procedure PasteArtCodeToSRPrice(var record SRPriceVc SRp,Integer rownr,integer initrownr,record ItemStatusVc ISr,string serial,val q)
begin
  row SRPriceVc SRrw;
  record INVc INr;
  LongInt vinr,virownr;
  record LocationVc Locr;
  val lastcostprice;
  string 20 lastcostcur,location;

  ReadFirstItem(ISr.Code & ISr.Variety,INr,true,true);
  SRrw.Coefficient = INr.UnitCoefficient;
  SRrw.ArtCode = ISr.Code & ISr.Variety;
  //SRrw.Location = ISr.Location;
  SRrw.Qty = ISr.Instock;
  SRrw.Spec = INr.Name;
  SRrw.Objects = FindINObjects(INr.Objects,INr.Group);
  SRrw.UnitXval = INr.Width;
  SRrw.UnitYval = INr.Height;
  SRrw.UnitZval = INr.Depth;
  SRrw.SerialNr = serial;
  SRrw.VEInvoiceNr = FindPurchaseInvoiceNrForSerialNr(SRrw.ArtCode,SRrw.SerialNr,vinr,virownr);
  SRrw.Qty = q;
  if (NonBlank(SRrw.Location)) then begin
    location = SRrw.Location;
  end else begin
    location = SRp.Location;
  end;
  FindLastCostPriceForArtCode(SRp,SRrw,INr.Code,serial,location,lastcostprice,lastcostcur);
  SRrw.LastCostPrice = lastcostprice;
  SRrw.CurncyCode = lastcostcur;
  FindPriceInPlAndUpdDiffs(SRrw,INr.Code,serial,SRp,true);
/*
done when creating  NL Transaction
  Locr.Code = SRrw.Location;
  if (ReadFirstMain(Locr,1,true)) then begin
    SRrw.Objects = AddObjectToObjectList(SRrw.Objects,Locr.Objects);        
  end;
*/
  if (rownr==initrownr) then begin
    MatRowPut(SRp,rownr,SRrw);
  end else begin
    MatRowInsert(SRp,rownr,SRrw);
  end;
  
  return;
end;
  
global
function Boolean SRPriceVc_PasteArtCode(var record SRPriceVc SRp,Integer arownr,Boolean changedf,var string inwarn)
begin
  Boolean res;
  record INVc INr;
  record ItemStatusVc ISr;
  Boolean found;
  Integer keys;
  string 60 sz,msk,mskrep,serialnr,prevserialnr,firstserialnr,location;
  string 200 varsubset,barCodeSerial;
  row SRPriceVc SRrw;
  Integer rownr;
  Boolean itemfound,testf,foundsb,varf;
  record SerBalVc SBr;
  val q,serqty;
  record SerNrTrackBlock SNrb;
  record BarcodeVc Barcoder; //Edit***************************Sasha2,16:34 02.08.2016

  if (changedf) then begin
    BlockLoad(SNrb);
    rownr = arownr;
    
    res = true;
    MatRowGet(SRp,rownr,SRrw);
    Barcoder.Barcode = SRrw.ArtCode; //Edit***************************Sasha2,16:35 02.08.2016
    if (NonBlank(SRrw.Location)) then begin //Edit***************************Sasha2,15:13 06.07.2016 {
      location = SRrw.Location;
    end else begin
      location = SRp.Location;
    end; //Edit***************************Sasha2,15:13 06.07.2016 }   
    itemfound = GetFirstItem(SRrw.ArtCode,INr);
    if (itemfound==false) then begin
      itemfound = ReadFirstItem(SRrw.ArtCode,INr,true,true);
      if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
        INr.Code = SRrw.ArtCode;
        varf = true;
      end;
    end else begin
      if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
        varf = true;
      end;
    end;
    Barcoder.Itemcode = INr.Code; //Edit***************************Sasha2,16:39 02.08.2016 {
    if (ReadFirstKey("Itemcode",Barcoder,2,true)) then begin
      barCodeSerial = Barcoder.SerialNr;
    end; //Edit***************************Sasha2,16:39 02.08.2016 }
    if (nonblank(INr.WarnText1)) then begin
      inwarn = INr.WarnText1;
    end;
    /*if (UserCanAction("DisallowSerNrItemsOnSR",false)) then begin
      if (INr.SerNrf!=0) then begin
        inwarn = USetStr(20105);
        goto LSRPriceVc_PasteArtCode;
      end;
    end;
    if (UserCanAction("DisallownonSerNrItemsOnSR",false)) then begin
      if (INr.SerNrf==0) then begin
        inwarn = USetStr(20106);
        goto LSRPriceVc_PasteArtCode;
      end;
    end;*/

    /*found = true; //searches all articles with serials
    ISr.Code = INr.Code;
    if (nonblank(location)) then begin     
      ISr.Location = location;
      keys = 2;
    end else begin
      keys = 1;
    end;
    while (LoopMain(ISr,keys,found)) begin
      if (ISr.Code!=INr.Code) then begin found = false; end;
      if (nonblank(location)) then begin     
        if (ISr.Location!=location) then begin
          found = false;
        end;
      end;      
      if (found) then begin
        testf = true;
        if (ISr.Location==";;;") then begin testf = false; end;
        if (ISr.Instock<=0) then begin testf = false; end;
        if (testf) then begin
          switch (INr.SerNrf) begin
            case 0:
              PasteArtCodeToSRPrice(SRp,rownr,arownr,ISr,"",ISr.Instock);
              rownr = rownr + 1;
              if (rownr>=500) then begin
//what then ?   
                inwarn = USetStr(20407);
                goto LSRPriceVc_PasteArtCode;
              end;
            otherwise
              q = 0.00001;
              ResetLoop(SBr);
              foundsb = true;
              SBr.Item = ISr.Code;
              SBr.Location = ISr.Location;
              SBr.Quant = q;
              while (LoopKey("ItemQuant",SBr,3,foundsb)) begin
                if (varf) then begin
                  if (Left(SBr.Item,len(INr.Code))!=INr.Code) then begin foundsb = false; end;
                end else begin
                  if (SBr.Item!=ISr.Code) then begin foundsb = false; end;
                end;
                if (SBr.Location!=ISr.Location) then begin foundsb = false; end;
                if (SBr.Quant<q) then begin foundsb = false; end;
                if (foundsb) then begin
                  testf = true;
                  if (varf) then begin
                    if (Right(SBr.Item,len(SBr.Item)-len(INr.Code))!=ISr.Variety) then begin testf = false; end;
                  end;
                  if (testf) then begin
                    if (SNrb.BulkSerialNos!=0) then begin
                      if (nonblank(prevserialnr)) then begin
                        if (StringToLongInt(SBr.Serial)!=StringToLongInt(prevserialnr)+1) then begin
                          PasteArtCodeToSRPrice(SRp,rownr,arownr,ISr,firstserialnr & ":" & SBr.Serial,serqty);
                          serqty = 0;
                          firstserialnr = "";
                          rownr = rownr + 1;
                        end;
                      end;
                      prevserialnr = SBr.Serial;
                      if (blank(firstserialnr)) then begin
                        firstserialnr = SBr.Serial;
                      end;
                      serqty = serqty + 1;
                    end else begin
                      PasteArtCodeToSRPrice(SRp,rownr,arownr,ISr,SBr.Serial,SBr.Quant);
                      rownr = rownr + 1;
                    end;
                    if (rownr>=500) then begin
  //what then ?               
                      inwarn = USetStr(20407);
                      goto LSRPriceVc_PasteArtCode;
                    end;
                  end;
                end;
              end;
          end;
        end;
      end;
    end;*/
  end;
LSRPriceVc_PasteArtCode:;  
  if (SNrb.BulkSerialNos!=0) then begin
    if (serqty>0) then begin
      PasteArtCodeToSRPrice(SRp,rownr,arownr,ISr,firstserialnr & ":" & prevserialnr,serqty);
    end;
  end;
  if (rownr==arownr) then begin //Edit***************************Sasha2,14:23 07.07.2016 {
    SBr.Item = SRrw.ArtCode; //Edit***************************Sasha2,17:13 02.08.2016 {
    SBr.Location = SRp.Location;
    SBr.Serial = barCodeSerial;
    if (ReadFirstMain(SBr,3,true)) then begin
      ISr.Code = SBr.Item;
      ISr.Location = SBr.Location;
      ReadFirstMain(ISr,2,true);
      PasteArtCodeToSRPrice(SRp,rownr,arownr,ISr,SBr.Serial,SBr.Quant);
    end else begin //Edit***************************Sasha2,17:13 02.08.2016 }
      ISr.Code = INr.Code;
      ISr.Location = location;
      if (ReadFirstMain(ISr,2,true)) then begin
        PasteArtCodeToSRPrice(SRp,rownr,arownr,ISr,barCodeSerial,ISr.Instock);
      end else begin
        ISr.Code = INr.Code;
        PasteArtCodeToSRPrice(SRp,rownr,arownr,ISr,barCodeSerial,0);
      end;  
    end;
  end; //Edit***************************Sasha2,14:23 07.07.2016 }
  SRPriceSumUp(SRp);
  SRPriceVc_PasteArtCode = res;
  return;
end;
        
/*global
procedure SRPriceVc_PastePosCode(var record SRPriceVc SRp,Integer rownr)
begin
  row SRPriceVc SRrw;
  row SRPriceVc toSRrw;
  record PISVc PISr;
  record MainStockBlock MSb;
  string 255 location;
  val rem;

  MatRowGet(SRp,rownr,SRrw);
  location = SRrw.Location;
  if (blank(location)) then begin
    location = SRp.Location;
  end;
  if (blank(location)) then begin
    BlockLoad(MSb);
    location = MSb.MainStock;
  end;  
  FindStockValueAtPosition(SRrw.ArtCode,location,SRrw.PosCode,PISr);
  if (SRrw.Qty>PISr.LeftQty) then begin
    rem = SRrw.Qty - PISr.LeftQty;
    SRrw.Qty = PISr.LeftQty;
    MatRowPut(SRp,rownr,SRrw);
    CopyRow(SRp,SRrw,toSRrw);    
    toSRrw.PosCode = "";
    toSRrw.Qty = rem;
    MatRowInsert(SRp,rownr+1,toSRrw);
  end;
  return;
end;   */ 

global
procedure SRPriceVc_PasteNewFIFO(var record SRPriceVc SRr,Integer rownr)
begin
  row SRPriceVc SRrw;
  row SRPriceVc cSRrw;
  record MainStockBlock MSb;
  Integer i,rwcnt;

  BlockLoad(MSb);
  if (MSb.SamePriceforItemonSR!=0) then begin
    MatRowGet(SRr,rownr,cSRrw);
    cSRrw.NewFIFORowVal = cSRrw.Qty*cSRrw.NewFIFO;
    cSRrw.DiffFIFO = cSRrw.NewFIFO - cSRrw.FIFO;
    cSRrw.DiffFIFORowVal = cSRrw.NewFIFORowVal - cSRrw.FIFORowVal;
    MatRowPut(SRr,rownr,cSRrw);
    rwcnt = MatRowCnt(SRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SRr,i,SRrw);
      if (i!=rownr) then begin
        if (SRrw.ArtCode==cSRrw.ArtCode) then begin
          if (blank(SRrw.NewFIFO)) then begin
            SRrw.NewFIFO = cSRrw.NewFIFO;
            SRrw.NewFIFORowVal = SRrw.Qty*SRrw.NewFIFO;
            SRrw.DiffFIFO = SRrw.NewFIFO - SRrw.FIFO;
            SRrw.DiffFIFORowVal = SRrw.NewFIFORowVal - SRrw.FIFORowVal;
            MatRowPut(SRr,i,SRrw);
          end;
        end;
      end;
    end;
  end else begin
    MatRowGet(SRr,rownr,SRrw);
    SRrw.NewFIFORowVal = SRrw.Qty*SRrw.NewFIFO;
    SRrw.DiffFIFO = SRrw.NewFIFO - SRrw.FIFO;
    SRrw.DiffFIFORowVal = SRrw.NewFIFORowVal - SRrw.FIFORowVal;
    MatRowPut(SRr,rownr,SRrw);
  end;
  SRPriceSumUp(SRr);
  return;
end;    
/*
global
function Boolean SRPriceVc_PasteACShort(var record SRPriceVc SRr,Integer rownr)
begin
  row SRPriceVc SRrw;
  string 255 tstr,obj;
  Boolean res;
  
  if (rownr>=0) then begin
    MatRowGet(SRr,rownr,SRrw);
    GetACShortAccount(SRrw.ACShort,tstr,obj);
    SRrw.SRVarAcc = tstr;
    SRrw.Objects = obj;
    if nonblank(obj) then begin
      if nonblank(SRrw.Objects) then begin
        if (obj<>SRrw.Objects) then begin
          obj = obj & "," & SRrw.Objects;
          NormalizeObjstr(obj);
        end;  
      end;        
      SRrw.Objects = obj;
    end;
    MatRowPut(SRr,rownr,SRrw);
    res = true;
  end else begin
    GetACShortAccount(SRr.ACShort,tstr,obj);
    SRr.SRVarAcc = tstr;
    SRr.Objects = obj;
    if nonblank(obj) then begin
      if nonblank(SRr.Objects) then begin
        if (obj<>SRr.Objects) then begin
          obj = obj & "," & SRr.Objects;
          NormalizeObjstr(obj);
        end;  
      end;        
      SRr.Objects = obj;
    end;
    res = true;    
  end;  
  SRPriceVc_PasteACShort = res;
  return;
end;*/

//Edit***************************Sasha2,15:49 07.07.2016 {
procedure SRPriceVc_PasteLocation_HandleRow(var row SRPriceVc SRrw,Integer rownr,record SRPriceVc SRPricer)
begin
  record ItemStatusVc ISr;
  val lastcostprice;
  string 20 lastcostcur;
  
    FindLastCostPriceForArtCode(SRPricer,SRrw,SRrw.ArtCode,SRrw.SerialNr,SRPricer.Location,lastcostprice,lastcostcur);
    SRrw.LastCostPrice = lastcostprice;
    SRrw.CurncyCode = lastcostcur;
    if (blank(SRrw.SerialNr)) then begin
      ISr.Code = SRrw.ArtCode;
      ISr.Location = SRPricer.Location;
      if (ReadFirstMain(ISr,2,true)) then begin
        SRrw.Qty = ISr.Instock;
        FindPriceInPlAndUpdDiffs(SRrw,SRrw.ArtCode,"",SRPricer,false);
      end;
    end else begin
      SRrw.Qty = FindSerialNrQty(SRrw.ArtCode,SRrw.SerialNr,SRPricer.Location);
      if (SRrw.Qty==BlankVal) then begin
        SRrw.Qty = 0;
      end;
      FindPriceInPlAndUpdDiffs(SRrw,SRrw.ArtCode,SRrw.SerialNr,SRPricer,false);
    end;
    
  return;
end; //Edit***************************Sasha2,15:49 07.07.2016 }

global
function Boolean SRPriceVc_PasteLocation(var record SRPriceVc SRr,Integer rownr)
begin
  record LocationVc Locr;
  row SRPriceVc SRrw;
  Boolean res;
  integer rwcnt,i;
  
  if (rownr>=0) then begin
    //Locr.Code = SRr.Location;
    //ReadFirstMain(Locr,1,true);

  end else begin
    rwcnt = MatRowCnt(SRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SRr,i,SRrw);
      if (NonBlank(SRrw.ArtCode)) then begin
        SRPriceVc_PasteLocation_HandleRow(SRrw,i,SRr);
      end;
      MatRowPut(SRr,i,SRrw);
    end;
    SRPriceSumUp(SRr);
  end;  
  SRPriceVc_PasteLocation = res;
  return;
end;

global
function Boolean SRPriceVc_RecalcPrices(var record SRPriceVc SRr,Integer rownr)
begin
  row SRPriceVc SRrw;
  Boolean res;
  integer rwcnt,i;

  if (rownr>=0) then begin
      MatRowGet(SRr,rownr,SRrw);
      if (NonBlank(SRrw.ArtCode)) then begin
        FindPriceInPlAndUpdDiffs(SRrw,SRrw.ArtCode,SRrw.SerialNr,SRr,false);
      end;
      MatRowPut(SRr,rownr,SRrw);
  end else begin
    rwcnt = MatRowCnt(SRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SRr,i,SRrw);
      if (NonBlank(SRrw.ArtCode)) then begin
        FindPriceInPlAndUpdDiffs(SRrw,SRrw.ArtCode,SRrw.SerialNr,SRr,false);
      end;
      MatRowPut(SRr,i,SRrw);
    end;
    SRPriceSumUp(SRr);
  end;  
  SRPriceVc_RecalcPrices = res;
  return;
end;

global
procedure SRPriceVc_PasteSerialNr(var record SRPriceVc SRr,Integer rownr)
begin
  row SRPriceVc SRrw;
  val UnitXval,UnitYval,UnitZval,oldquant;
  string 255 tstr;
  Boolean chsum;
  string 20 location;
  record INVc INr;
  record SerNrTrackBlock SNrb;
  val lastcostprice;
  string 20 lastcostcur;

  MatRowGet(SRr,rownr,SRrw);
  oldquant = SRrw.Qty;
  location = SRrw.Location;
  if (blank(location)) then begin
    location = SRr.Location;
  end;
  ReadFirstItem(SRrw.ArtCode,INr,true,true);
  if (nonblank(SRrw.ArtCode)) and (INr.SerNrf==1) then begin
    if (BulkSerialNos_CalculateQuantityAndSerialNr(SNrb,true,SRrw.ArtCode,SRrw.SerialNr,SRrw.Qty)) then begin
      MatRowPut(SRr,rownr,SRrw);
      MatRowGet(SRr,rownr,SRrw);
    end;
  end;
  if ((SNrb.BulkSerialNos==0) or (InString(SRrw.SerialNr,":")==0)) then begin
    SerialNrDimensions(SRrw.ArtCode,SRrw.SerialNr,UnitXval,UnitYval,UnitZval);
    SRrw.UnitXval = UnitXval;
    SRrw.UnitYval = UnitYval;
    SRrw.UnitZval = UnitZval;
    if (CheckSerialStatus(SRrw.ArtCode,SRrw.SerialNr,tstr)==1) then begin
      MessageBox(0,tstr);
    end;
    //SRrw.Qty = CalculateSerialNrQuantity(SRrw.ArtCode,SRrw.SerialNr,location,true,SRrw.UnitXval,SRrw.UnitYval,SRrw.UnitZval,SRrw.Qty); //Edit***************************Sasha2,15:05 07.07.2016
    /*SRrw.Qty = FindSerialNrQty(SRrw.ArtCode,SRrw.SerialNr,location); //Edit***************************Sasha2,15:05 07.07.2016 
    if (SRrw.Qty==BlankVal) then begin
      SRrw.Qty = 0;
    end;
    if (SRrw.Qty!=oldquant) then begin
      chsum = true;
    end;*/
    chsum = true; //Edit***************************Sasha2,11:42 21.07.2016
  end;
  if (Blank(SRrw.SerialNr)) then begin //Edit***************************Sasha2,16:12 08.07.2016 {
    SRrw.LastCostPrice = BlankVal;
    SRrw.CurncyCode = "";
    FindPriceInPlAndUpdDiffs(SRrw,SRrw.ArtCode,SRrw.SerialNr,SRr,true);
  end else begin
    FindLastCostPriceForArtCode(SRr,SRrw,SRrw.ArtCode,SRrw.SerialNr,location,lastcostprice,lastcostcur);
    SRrw.LastCostPrice = lastcostprice;
    SRrw.CurncyCode = lastcostcur;
    FindPriceInPlAndUpdDiffs(SRrw,SRrw.ArtCode,SRrw.SerialNr,SRr,true);
  end; //Edit***************************Sasha2,16:12 08.07.2016 }
  
  MatRowPut(SRr,rownr,SRrw);
  if (chsum) then begin
    SRPriceSumUp(SRr);
  end;    
  return;
end;
