external function roundmode SetRoundModeD(Integer);
external function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external procedure PUSumUp(var record PUVc);
external procedure PUVc_PasteTransDate(var record PUVc,var Boolean,var Boolean,var Boolean);
external function Integer InString2(string,string);
external function string 255 StrReplace(string,string,string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function val STCompFindSerialNrQtyDate(string,string,string,string,string,var string,date); //Edit***************************Sasha2,11:52 13.09.2016
external function Boolean SRPriceVc_PasteArtCode(var record SRPriceVc,Integer,Boolean,var string); //Edit***************************Sasha2,14:44 15.09.2016
external procedure SRPriceVc_PasteSerialNr(var record SRPriceVc,Integer); //Edit***************************Sasha2,14:47 15.09.2016
external procedure SRPriceSumUp(var record SRPriceVc); //Edit***************************Sasha2,14:52 15.09.2016
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function val AbsoluteVal(val);

global
procedure CalcEANCHS(var string str)
begin
integer c1,c2,lenth,i,chsum,litle;
val sum;
  sum = 0;
  lenth = len(str);
  if (lenth==12)then begin
    for(i=0;i<12;i=i+2)begin
      c1 = evaltoval(mid(str,i,1));
      c2 = evaltoval(mid(str,i+1,1));
      c2=c2*3;
      sum = sum+c1+c2;
    end;
    if(round(sum/10,SetRoundModeD(0))>sum/10) then begin
      litle = round(sum/10,SetRoundModeD(0))-1;
    end else begin
      litle = round(sum/10,SetRoundModeD(0));
    end;
    chsum  = 10-(10*(sum/10-litle));
    if(chsum==10) then begin chsum = 0; end;
    str = str & chsum;
  end else begin
    str = "";
  end;
  
return;
end;

global
procedure StringValIncrement(var string barcode,Integer increment)
begin
  integer lenght,i,lastindex,leftover,base,incr;
  array integer digit;
  boolean testf;
    
    testf = true;
    lenght = len(barcode);
    incr = increment;
    for (i=0;i<lenght;i=i+1) begin
      digit[i] = StringToInt(mid(barcode,i,1));
      lastindex = i;
    end;
    digit[lastindex] = digit[lastindex] + incr;
    while (digit[lastindex]>9 and testf) begin
      leftover = Mod(digit[lastindex],10);
      base = digit[lastindex] - leftover;
      if (base>0) then begin
        digit[lastindex] = leftover;
        incr = base/10;
        lastindex = lastindex - 1;
        digit[lastindex] = digit[lastindex] + incr;
      end;
      if (lastindex==0 and digit[lastindex]>9) then begin
        testf = false;
      end;
    end;
    barcode = "";
    if (testf) then begin
      for (i=0;i<lenght;i=i+1) begin
        barcode = barcode & digit[i];
      end;
    end;
 
  return; 
end;

global updating procedure CleaningMn() //Edit----------------------Dima  09.06.2016
begin
	record IVVc IVr;
	record VIVc VIr;
	record IPVc IPr;
	record RLinkVc RLr;
	record POVc POr;
	record PUVc PUr; // только  unOK
	record StockMovVc SMr;
	record SDVc SDr;
	record ItemStatusVc ISr;
	record ItemHistVc IHr;
	record SerBalVc SBr;
  record RetVc Retr;
	record RetPUVc RetPUr;
  record TRVc TRr;
  record OPVc OPr;
  record ORVc ORr;
  record SHVc SHr;
  record StockTakeVc STr;
  record FBVc FBr;
  record SRPriceVc SRPr;
  record SRVc SRr;
  record BarCodeVc BCr;
  record INVc INr;
  
	Boolean TrHs;
	
	TrHs = true;
	while (LoopMain(IVr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IVr);
	    StepBack(IVr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(VIr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(VIr);
	    StepBack(VIr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(IPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IPr);
	    StepBack(IPr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(RLr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RLr);
	    StepBack(RLr);
	  end;
	end;
	TrHs = true;
	while (LoopMain(POr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POr);
	    StepBack(POr);
	  end;
	end;
	TrHs = true;
	while (LoopMain(PUr,1,TrHs)) begin
	  if (TrHs) then begin
	    PUr.OKFlag = 0;
      RecordStore(PUr,true);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(SMr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SMr);
	    StepBack(SMr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(SDr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SDr);
	    StepBack(SDr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(ISr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ISr);
	    StepBack(ISr);
	  end;
	end;
	LogText(0,"Item statuses were removed..");
	TrHs = true;	
	while (LoopMain(IHr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IHr);
	    StepBack(IHr);
	  end;
	end;
	LogText(0,"Item histiry was removed..");					
	TrHs = true;	
	while (LoopMain(SBr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SBr);
	    StepBack(SBr);
	  end;
	end;	
	TrHs = true;	
	while (LoopMain(Retr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Retr);
	    StepBack(Retr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(RetPUr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RetPUr);
	    StepBack(RetPUr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(TRr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(TRr);
	    StepBack(TRr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(OPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(OPr);
	    StepBack(OPr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(ORr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ORr);
	    StepBack(ORr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(SHr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SHr);
	    StepBack(SHr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(STr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(STr);
	    StepBack(STr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(FBr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(FBr);
	    StepBack(FBr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(SRPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SRPr);
	    StepBack(SRPr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(SRr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SRr);
	    StepBack(SRr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(INr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(INr);
	    StepBack(INr);
	  end;
	end;
	
  TrHs = true;	
	while (LoopMain(BCr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(BCr);
	    StepBack(BCr);
	  end;
	end;
	
	LogText(0,"Registers were cleaned.......");
return;
end;

global updating procedure Cleaning2Mn() //Edit----------------------Dima  09.06.2016
begin
	record BarCodeVc BCr;
  record PLVc PLr;
  Boolean TrHs;
	
	TrHs = true;	
	while (LoopMain(BCr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(BCr);
	    StepBack(BCr);
	  end;
	end;
	TrHs = true;	
	while (LoopMain(PLr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(PLr);
	    StepBack(PLr);
	  end;
	end;
	LogText(0,"Registers were cleaned.......");
return;
end;

global updating procedure SetSerialNumberTypeForItemsMn(record RcVc RepSpec)	//Edit----------------------Dima  10.06.2016
begin
	record INVc INr;
	
	While(LoopMain(INr,1,true))  begin
		if (INr.Terminated==0) then begin
			INr.SerNrf = RepSpec.flags[0];
			RecordStore(INr,true);
		end;
	end;
  
end;

global updating procedure PUFromSerBalMn(record RcVc RecSpec) //Edit-------------------Vitalii 11:09 19.07.2016
begin
  record SerBalVc SBr;
  record PUVc PUr;
  row PUVc PUrw;
  integer i,quant;
  string 255 tstr,tstr2;
  Boolean datewarnf,warnoldrecordsf,warnfutdatef;
  
  quant = StringToInt(RecSpec.f1);
  i = 0;
  RecordNew(PUr);
  PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
	PUr.TransDate = CurrentDate;
	PUVc_PasteTransDate(PUr,datewarnf,warnoldrecordsf,warnfutdatef);
  while (LoopMain(SBr,1,true)) begin
    if (SBr.Quant > 0) then begin
      ClearRow(PUr,PUrw,1);
      PUrw.ArtCode = SBr.Item;
      MatRowPut(PUr,i,PUrw);
      PUVc_PasteArtCode(PUr,i,tstr,tstr2);
      MatRowGet(PUr,i,PUrw);
      PUrw.Quant = quant;
      PUrw.Location = SBr.Location;
      PUrw.SerialNr = SBr.Serial;
      PUrw.UPrice = SBr.CostPrice;
      PUrw.CostPrice = SBr.CostPrice;
      PUrw.Sum = SBr.CostPrice * quant;
      MatRowPut(PUr,i,PUrw);
      i = i + 1;
    end;
    if i>999 then begin
      PUSumUp(PUr);
      RecordStore(PUr,true);
      RecordNew(PUr);
      PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
      PUr.TransDate = CurrentDate;
      PUVc_PasteTransDate(PUr,datewarnf,warnoldrecordsf,warnfutdatef);
      i = 0;
    end;
  end;
  PUSumUp(PUr);
  RecordStore(PUr,true);
  return;
end;

global updating procedure UnOKStoreRegMn() //Edit-------------------Vitalii 13:44 19.07.2016
begin
	record SHVc SHr;
	record PUVc PUr;
  record SDVc SDr;
  record StockMovVc SMr;
  record RetVc Retr;
  record RetPUVc RetPUr;
  record StockTakeVc STr;
  record SRVc SRr;
	Boolean TrHs;
	
	TrHs = true;
	while (LoopMain(SHr,1,TrHs)) begin
	  if (TrHs) then begin
	    SHr.OKFlag = 0;
      RecordStore(SHr,true);
	  end;
	end;
	TrHs = true;
	while (LoopMain(PUr,1,TrHs)) begin
	  if (TrHs) then begin
	    PUr.OKFlag = 0;
      RecordStore(PUr,true);
	  end;
	end;
	TrHs = true;
	while (LoopMain(SDr,1,TrHs)) begin
	  if (TrHs) then begin
	    SDr.OKFlag = 0;
      RecordStore(SDr,true);
	  end;
	end;
	TrHs = true;
	while (LoopMain(SMr,1,TrHs)) begin
	  if (TrHs) then begin
	    SMr.OrdFlag = 0;
      SMr.OKFlag = 0;
      SMr.SentOKFlag = 0;
      RecordStore(SMr,true);
	  end;
	end;
	TrHs = true;
	while (LoopMain(Retr,1,TrHs)) begin
	  if (TrHs) then begin
	    Retr.OKFlag = 0;
      RecordStore(Retr,true);
	  end;
	end;
	TrHs = true;
	while (LoopMain(RetPUr,1,TrHs)) begin
	  if (TrHs) then begin
	    RetPUr.OKFlag = 0;
      RecordStore(RetPUr,true);
	  end;
	end;
	TrHs = true;
	while (LoopMain(STr,1,TrHs)) begin
	  if (TrHs) then begin
	    STr.OKFlag = 0;
      RecordStore(STr,true);
	  end;
	end;
	TrHs = true;
	while (LoopMain(SRr,1,TrHs)) begin
	  if (TrHs) then begin
	    SRr.OKFlag = 0;
      RecordStore(SRr,true);
	  end;
	end;
	
return;
end;

global  //Edit***************************Sasha2,9:41 19.07.2016
updating procedure ReplaceCharFromINMn(record RcVc RepSpec)
begin
	record INVc oldINr,INr;
	record BarCodeVc BarCoder;
	string 1 frchar,tochar,c;
	string 20 prevCode,newCode;
	integer l,i;
	vector string 20 codes;
	array string 20 arrCodes;
	boolean proceedf;
	 
  	if (Blank(RepSpec.f1) or Blank(RepSpec.f2)) then begin
  	  goto LRemoveCharFromINMn;
  	end;
  	if (RepSpec.f1==RepSpec.f2) then begin
  	  goto LRemoveCharFromINMn;
  	end;
  	frchar = left(RepSpec.f1,1);
  	tochar = left(RepSpec.f2,1);
	
  	While(LoopMain(INr,1,true))  begin
  		if (InString2(INr.Code,frchar)>=0) then begin
  		  prevCode = INr.Code;
  		  l = len(prevCode);
  		  newCode = "";
    		for (i=0;i<l;i=i+1) begin
    		  c = Mid(prevCode,i,1);
    		  if (c==frchar) then begin
    		    newCode = newCode & tochar;
    		  end else begin
    		    newCode = newCode & c;
    		  end;
    		end;
    		if (prevCode!=newCode) then begin
    		  codes[prevCode] = newCode;
    		end;
  		end;
  	end;
  	GetVectorTags(codes,arrCodes);
  	if (arrCodes.length>0) then begin
  	  for (i=0;i<arrCodes.length;i=i+1) begin
  	    proceedf = false;
  	    prevCode = arrCodes[i];
  	    newCode = codes[arrCodes[i]];
  	    INr.Code = newCode;
  	    if (ReadFirstMain(INr,1,true)) then begin
  	      INr.Code = prevCode;
  	      if (ReadFirstMain(INr,1,true)) then begin
  	        RecordDelete(INr);
  	        proceedf = true;
  	      end;
  	    end else begin
    	    INr.Code = prevCode;
    	    if (ReadFirstMain(INr,1,true)) then begin
    	      RecordCopy(oldINr,INr);
    	      INr.Code = newCode;
    	      if (RecordUpdate(oldINr,INr,false)==0) then begin
    	        proceedf = true;
    	      end;
    	    end;
  	    end;
  	    
  	    if (proceedf) then begin
    	    BarCoder.Itemcode = prevCode;
          while (ReadFirstKey("Itemcode",BarCoder,1,true)) begin
            if (BarCoder.Itemcode==prevCode) then begin
  	          BarCoder.Itemcode = StrReplace(BarCoder.Itemcode,prevCode,newCode);
  	          if (NonBlank(BarCoder.SerialNr)) then begin
  	            BarCoder.SerialNr = StrReplace(BarCoder.SerialNr,prevCode,newCode);
  	          end;
  	          RECORDSTORE(BarCoder,true);
  	          LogText(0,"prevCode:" & prevCode & ",newCode:" & newCode & ",BarCoder.Itemcode:" & BarCoder.Itemcode & ",BarCoder.SerialNr:" & BarCoder.SerialNr);
            end;
            BarCoder.Itemcode = prevCode;
          end;
  	    end;
  	  end;
  	end;

LRemoveCharFromINMn:;
  
end;




global updating procedure CleanBadINMn()
begin
	record INVc INr;
	
	INr.Code = "CHOCOLATE_GREEDY_PROBE";
	if(readfirstmain(INr,1,true))then begin
		logtext(0,INr.Code);
		recorddelete(INr);
	end;
	
	INr.Code = "CHOCOLATE_GREEDY_TEST";
	if(readfirstmain(INr,1,true))then begin
		logtext(0,INr.Code);
		recorddelete(INr);
	end;
	
	INr.Code = "AOUD_EMBER_ROSE_PROBE";
	if(readfirstmain(INr,1,true))then begin
		logtext(0,INr.Code);
		recorddelete(INr);
	end;
	
	INr.Code = "FRUITS_OF_THE_MUSK_TEST";
	if(readfirstmain(INr,1,true))then begin
		logtext(0,INr.Code);
		recorddelete(INr);
	end;
	
return;
end;

global //Edit***************************Sasha2,11:56 31.08.2016 {
updating procedure RenameCertainDIMn(record RcVc RepSpec)
begin
	record INVc INr;
	record DIVc DIr;
	Boolean savef;
	string 10 curdisp;
	string 255 dispbuildstr;
	Integer pos;
		
   if (blank(RepSpec.f1) or blank(RepSpec.f2)) then begin
     goto LRenameCertainDIMn;
   end;
   
   INr.Code = "";
   While(LoopMain(INr,1,true)) begin
  	 dispbuildstr = "";
  	 savef = false;
  	 pos = 0;
  	 ExtractObjWithSeparator(",",INr.DispGroups,true,pos,curdisp);
  	 while (NonBlank(curdisp)) begin
  	   if (curdisp==RepSpec.f1) then begin
  	     if (blank(dispbuildstr)) then begin
  	       dispbuildstr = RepSpec.f2;
  	     end else begin
  	       dispbuildstr = dispbuildstr & "," & RepSpec.f2;
  	     end;
  	     savef = true;
  	   end else begin
  	     if (blank(dispbuildstr)) then begin
  	       dispbuildstr = curdisp;
  	     end else begin
  	       dispbuildstr = dispbuildstr & "," & curdisp;
  	     end;
  	   end;
  	   ExtractObjWithSeparator(",",INr.DispGroups,true,pos,curdisp);
  	 end;
  	 if (savef) then begin
	     INr.DispGroups = dispbuildstr;
	     RECORDSTORE(INr,true);
	   end;
   end;
   
LRenameCertainDIMn:;   

return;
end; //Edit***************************Sasha2,11:56 31.08.2016 }

global //Edit***************************Sasha2,13:51 02.09.2016 {
updating procedure AggregateSameItemsInStockTakeMn(record RcVc RepSpec)
begin
  record StockTakeVc STr,oldSTr,prevSTr;
  row StockTakeVc STrw,prevSTrw;
	string 20 curStTake,location,serNrStTake,rowNrStTake,positionInStTake;
	Integer pos,pos1,rwcnt,i,realRowCoef;
	vector record StockTakeVc modifiedStTakes;
	vector Boolean ifStTakeWasModified;
	vector string 20 serialPosInStTakeVect;
	array string 20 serNrs;
	boolean testf,isModifiedCurSTr;
		
    if (blank(RepSpec.f1) or blank(RepSpec.f2)) then begin
      goto LAggregateSameItemsInStockTakeMn;
    end;
    
    LogText(0,"StockTakeVcs sequence: " & RepSpec.f1);
    
    location = RepSpec.f2;
    pos = 0;
    ExtractObjWithSeparator(",",RepSpec.f1,true,pos,curStTake);
    while (NonBlank(curStTake)) begin
      testf = false;
      if (ifStTakeWasModified[StringToLongInt(curStTake)]==true) then begin
        STr = modifiedStTakes[StringToLongInt(curStTake)];
        testf = true;
      end else begin
        STr.SerNr = StringToLongInt(curStTake);
        testf = ReadFirstMain(STr,1,true);
      end;
      if (testf) then begin
        testf = true;
        if (STr.Location!=location) then begin testf = false; end;
        if (STr.OKFlag==0) then begin testf = false; end;
        if (testf) then begin
          isModifiedCurSTr = false;
          rwcnt = MatRowCnt(STr);
          realRowCoef = 0;
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(STr,i,STrw);
            if (NonBlank(STrw.SerialNr)) then begin
              positionInStTake = serialPosInStTakeVect[STrw.SerialNr];
              if (blank(positionInStTake)) then begin
                serialPosInStTakeVect[STrw.SerialNr] = STr.SerNr & "," & i;
              end else begin
                pos1 = 0;
                ExtractObjWithSeparator(",",positionInStTake,true,pos1,serNrStTake);
                ExtractObjWithSeparator(",",positionInStTake,true,pos1,rowNrStTake);
                testf = false;
                if (StringToLongInt(serNrStTake)==STr.SerNr) then begin
                  if (STr.OKFlag == 1) then begin
                    RecordCopy(oldSTr,STr);
                    STr.OKFlag = 0;
                    if (RecordUpdate(oldSTr,STr,true)!=0) then begin
                      LogText(0,"Not able to unok StockTakeVc #:" & STr.SerNr);
                      goto LAggregateSameItemsInStockTakeMn;
                    end;
                  end;
                  MatRowGet(STr,StringToInt(rowNrStTake),prevSTrw);
                  if (STrw.SerialNr==prevSTrw.SerialNr) then begin
                    prevSTrw.Qty = prevSTrw.Qty + STrw.Qty;
                    MatRowPut(STr,StringToInt(rowNrStTake),prevSTrw);
                    LogText(0,"In StockTakeVc #" & STr.SerNr & " deleted row #" & (i+1+realRowCoef) & ". Serial: " & STrw.SerialNr & ", qty: " & STrw.Qty & ", barcode: " & STrw.BarCode & ". Added to StockTakeVc #" & STr.SerNr & ", row#" & (StringToInt(rowNrStTake) + 1));
                    matrowdelete(STr,i); 
        	  				i=i-1;
        	  				rwcnt = rwcnt - 1;
        	  				realRowCoef = realRowCoef + 1;
        	  				isModifiedCurSTr = true;  
                  end;
                end else begin
                  if (ifStTakeWasModified[serNrStTake]==true) then begin
                    prevSTr = modifiedStTakes[serNrStTake];
                    testf = true;
                  end else begin
                    prevSTr.SerNr = StringToLongInt(serNrStTake);
                    if (ReadFirstMain(prevSTr,1,true)) then begin
                      testf = true;
                    end;
                  end;
                  if (testf) then begin
                    if (STr.OKFlag == 1) then begin
                      RecordCopy(oldSTr,STr);
                      STr.OKFlag = 0;
                      if (RecordUpdate(oldSTr,STr,true)!=0) then begin
                        LogText(0,"Not able to unok StockTakeVc #:" & STr.SerNr);
                        goto LAggregateSameItemsInStockTakeMn;
                      end;
                    end;
                    MatRowGet(prevSTr,StringToInt(rowNrStTake),prevSTrw);
                    if (STrw.SerialNr==prevSTrw.SerialNr) then begin
                      prevSTrw.Qty = prevSTrw.Qty + STrw.Qty;
                      MatRowPut(prevSTr,StringToInt(rowNrStTake),prevSTrw);
                      LogText(0,"In StockTakeVc #" & STr.SerNr & " deleted row #" & (i+1+realRowCoef) & ". Serial: " & STrw.SerialNr & ", qty: " & STrw.Qty & ", barcode: " & STrw.BarCode & ". Added to StockTakeVc #" & prevSTr.SerNr & ", row#" & (StringToInt(rowNrStTake) + 1));
                      matrowdelete(STr,i); 
          	  				i=i-1;
          	  				rwcnt = rwcnt - 1;
          	  				realRowCoef = realRowCoef + 1;
          	  				isModifiedCurSTr = true;
                      modifiedStTakes[serNrStTake] = prevSTr;
                      ifStTakeWasModified[serNrStTake] = true;  
                    end;
                  end;  
                end;
              end;
            end;
          end;
          if (isModifiedCurSTr) then begin
            modifiedStTakes[STr.SerNr] = STr;
            ifStTakeWasModified[STr.SerNr] = true;
          end;
        end;
      end;
      ExtractObjWithSeparator(",",RepSpec.f1,true,pos,curStTake);
    end;
		
    GetVectorTags(modifiedStTakes,serNrs);
    for (i=0;i<serNrs.length;i=i+1) begin
      STr = modifiedStTakes[serNrs[i]]; LogText(0,"Current StockTake #" & STr.SerNr & " OKFlag:" & STr.OKFlag);
      if (STr.OKFlag == 0) then begin
        if (MatRowCnt(STr)==0) then begin
          RecordDelete(STr);
        end else begin
          RecordCopy(oldSTr,STr);
          STr.OKFlag = 1;
          RecordUpdate(oldSTr,STr,true);
        end;
      end else begin
        RECORDSTORE(STr,true);
      end;
    end;
   
LAggregateSameItemsInStockTakeMn:;   

return;
end; //Edit***************************Sasha2,13:51 02.09.2016 }

global //Edit***************************Sasha2,10:11 13.09.2016 {
updating procedure RecalcPricesInStockTakeMn(record RcVc RepSpec)
begin
  record StockTakeVc STr;
  row StockTakeVc STrw;
  record PLVc PLr;
	date sd,ed;
	Boolean TrHs,testf,savef;
	Integer i,rwcnt;
		
    sd = RepSpec.sStartDate;
    ed = RepSpec.sEndDate;
     
    STr.TransDate = sd;
    TrHs = true;
    While(LoopKey("TransDate",STr,1,TrHs)) begin
      testf = true;
      if (NonBlankDate(sd) and STr.TransDate < sd) then begin testf = false; end;
      if (NonBlankDate(ed) and STr.TransDate > ed) then begin testf = false; TrHs = false; end;
      //if (STr.OKFlag!=1) then begin testf = false; end;
      if (testf) then begin
        savef = false;
        rwcnt = MatRowCnt(STr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(STr,i,STrw);
          if (NonBlank(STrw.ArtCode) and NonBlank(STrw.SerialNr)) then begin
            PLr.SerialNr = STrw.SerialNr;
            PLr.PLCode = "RRP";
            PLr.ArtCode = STrw.ArtCode;
            if (ReadFirstKey("SerialNr",PLr,3,true) and (STrw.Price!=PLr.ExVatPrice)) then begin
              STrw.Price = PLr.ExVatPrice;
              MatRowPut(STr,i,STrw);
              savef = true;
            end;
          end;
        end;
        if (savef) then begin
          RECORDSTORE(STr,true);
        end;
      end;   
    end;

return;
end; //Edit***************************Sasha2,10:11 13.09.2016 }

global //Edit***************************Sasha2,10:11 13.09.2016 {
updating procedure RecalcMyInStockInStockTakeMn(record RcVc RepSpec)
begin
  record StockTakeVc STr;
  row StockTakeVc STrw;
	date sd,ed;
	Boolean TrHs,testf,savef;
	Integer i,rwcnt;
	val instock;
	string 100 variety,position,resserialnr;
		
    sd = RepSpec.sStartDate;
    ed = RepSpec.sEndDate;
     
    STr.TransDate = sd;
    TrHs = true;
    While(LoopKey("TransDate",STr,1,TrHs)) begin
      testf = true;
      if (NonBlankDate(sd) and STr.TransDate < sd) then begin testf = false; end;
      if (NonBlankDate(ed) and STr.TransDate > ed) then begin testf = false; TrHs = false; end;
      if (STr.OKFlag!=1) then begin testf = false; end;
      if (testf) then begin
        savef = false;
        rwcnt = MatRowCnt(STr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(STr,i,STrw);
          if (NonBlank(STrw.ArtCode) and NonBlank(STrw.SerialNr)) then begin
            instock = STCompFindSerialNrQtyDate(STrw.ArtCode,variety,STrw.SerialNr,STr.Location,position,resserialnr,STr.TransDate);
            if (STrw.MyInStock!=instock) then begin
              STrw.MyInStock = instock;
              MatRowPut(STr,i,STrw);
              savef = true;
            end;
          end;
        end;
        if (savef) then begin
          RECORDSTORE(STr,true);
        end;
      end;   
    end;

return;
end; //Edit***************************Sasha2,10:11 13.09.2016 }

global //Edit***************************Sasha2,14:02 15.09.2016 {
updating function LongInt RecordAction_raPastePUInSRPrice(var record PUVc PUr,var record SRPriceVc SRPricer)
BEGIN
  row PUVc PUrw;
  row SRPriceVc SRPricerw;
  LongInt res,newnr;
  Integer i,rwcnt,nrwcnt;
  Boolean testf;
  string 255 inwarn;
  val fr,to1,to2,br1,br2;
  string 5 crncy;
  record BaseCurBlock BCb;//Edit***************************Sasha2,11:38 26.10.2016
       
  BlockLoad(BCb); //Edit***************************Sasha2,11:38 26.10.2016
  RecordNew(SRPricer);
  SRPricer.PUNr = PUr.SerNr;
  if (SRPricer.SerNr==-1) then begin  
    SRPricer.SerNr = NextSerNr("SRPriceVc",SRPricer.TransDate,newnr,false,"");
    if (SRPricer.SerNr==-1) then begin 
      res = 1747;
      goto LRecordAction_raPastePUInSRPrice; 
    end;
  end;
  crncy = "UAH";
  GetFullCurncyRate(crncy,CurrentDate,fr,to1,to2,br1,br2);
  if (fr!=0) then begin
    SRPricer.HeaderRate = fr;
  end;
  SRPricer.Location = PUr.Location;
  SRPricer.CalcPriceFromCostf = 1;
  rwcnt = MatRowCnt(PUr);
  nrwcnt = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    testf = true;
    if (Blank(PUrw.ArtCode)) then begin testf = false; end;
    if (testf) then begin
      ClearRow(SRPricer,SRPricerw,1);
      SRPricerw.ArtCode = PUrw.ArtCode;
      MatRowPut(SRPricer,nrwcnt,SRPricerw);
      SRPriceVc_PasteArtCode(SRPricer,nrwcnt,true,inwarn);
      MatRowGet(SRPricer,nrwcnt,SRPricerw);
      SRPricerw.Qty = PUrw.Quant;
      //SRPricerw.CurncyCode = PUr.CurncyCode; //Edit***************************Sasha2,11:40 26.10.2016
      SRPricerw.CurncyCode = BCb.BaseCur1; //Edit***************************Sasha2,11:40 26.10.2016
      SRPricerw.LastCostPrice = PUrw.CostPrice;
      SRPricerw.SerialNr = PUrw.SerialNr;
      MatRowPut(SRPricer,nrwcnt,SRPricerw);
      SRPriceVc_PasteSerialNr(SRPricer,nrwcnt);
      MatRowGet(SRPricer,nrwcnt,SRPricerw);
      nrwcnt = MatRowCnt(SRPricer);
    end;
  end;

  if ((MatRowCnt(SRPricer)>0) and (SRPricer.SerNr!=-1)) then begin
    SRPriceSumUp(SRPricer);
    if (RecordStore(SRPricer,false)) then begin 
      CreateRecordLink(SRPricer,CurrentCompany,PUr,CurrentCompany);  
      CreateRecordLink(PUr,CurrentCompany,SRPricer,CurrentCompany);  
    end;
    res = 0;
  end;
LRecordAction_raPastePUInSRPrice:;  
  RecordAction_raPastePUInSRPrice = res;
  RETURN;
END; //Edit***************************Sasha2,14:02 15.09.2016 }

updating
procedure ChangeCostInNextTargetRegisters(LongInt sourceNr,val unitCost) 
begin
    record ItemHistVc IHr,stockMovIHr;
    record IVVc IVr;
    row IVVc IVrw;
    record StockMovVc SMr;
    row StockMovVc SMrw;
    boolean TrHs,testf,TrHs1;
    
    IHr.Source = sourceNr;
    TrHs = true;
    while (LoopKey("Source",IHr,1,TrHs)) begin
      testf = true;
      if (IHr.Source!=sourceNr) then begin TrHs = false; testf = false; end;
      if (testf) then begin
        LogText(0,">>>>>>>>>>>");
        LogText(0,"IHr.SerNr:" & IHr.SerNr & "  former cost:" & IHr.TotCostPrice & "  new cost:" & AbsoluteVal(unitCost*IHr.Qty));
        IHr.TotCostPrice = AbsoluteVal(unitCost*IHr.Qty);
        IHr.RemCostPrice = AbsoluteVal(unitCost*IHr.RemQty);
        if (RECORDSTORE(IHr,true)) then begin
          switch (IHr.FileName) begin
            case "IVVc":
              LogText(0,"IVVc: IHr.SerNr:" & IHr.SerNr & " TransNr:" & IHr.TransNr);
              IVr.SerNr = IHr.TransNr;
              if (ReadFirstMain(IVr,1,true)) then begin
                MatRowGet(IVr,IHr.Row,IVrw);
                IVrw.FIFO = unitCost;
                IVrw.FIFORowVal = unitCost*IVrw.Quant;
                MatRowPut(IVr,IHr.Row,IVrw);
                RECORDSTORE(IVr,true);
                LogText(0,"IVVc stored IVr.SerNr:" & IVr.SerNr);
              end;
            case "StockMovVc":
              stockMovIHr.FileName = IHr.FileName;
              stockMovIHr.TransNr = IHr.TransNr;
              stockMovIHr.Row = IHr.Row;
              TrHs1 = true;
              while (loopkey("FNTransNr",stockMovIHr,3,TrHs1)) begin
                if (stockMovIHr.FileName!=IHr.FileName or stockMovIHr.TransNr!=IHr.TransNr or stockMovIHr.Row!=IHr.Row) then begin TrHs1 = false; end;
                if (TrHs1) then begin
                  stockMovIHr.TotCostPrice = AbsoluteVal(unitCost*stockMovIHr.Qty);
                  stockMovIHr.RemCostPrice = AbsoluteVal(unitCost*stockMovIHr.RemQty);
                  LogText(0,"StockMovVc: IHr.SerNr:" & stockMovIHr.SerNr & " TransNr:" & stockMovIHr.TransNr);
                  RECORDSTORE(stockMovIHr,true);
                  SMr.SerNr = IHr.TransNr;
                  if (ReadFirstMain(SMr,1,true)) then begin
                    MatRowGet(SMr,IHr.Row,SMrw);
                    SMrw.OldPrice = unitCost;
                    SMrw.NewPrice = unitCost;
                    MatRowPut(SMr,IHr.Row,SMrw);
                    RECORDSTORE(SMr,true);
                    LogText(0,"StockMovVc stored SMr.SerNr:" & SMr.SerNr);
                  end;
                  if (stockMovIHr.Qty>0) then begin
                    ChangeCostInNextTargetRegisters(stockMovIHr.SerNr,unitCost);
                  end;
                end;
              end;RESETLOOP(stockMovIHr);
            otherwise
              LogText(0,"Another IHr.FileName:" & IHr.FileName);
          end;
        end;
        
      end;
    end;RESETLOOP(IHr);
  
  return;
end;


global //Edit***************************Sasha2,10:39 23.02.2017 {
updating procedure RetIVCoincidenceCheckMn(record RcVc RepSpec)
begin
  record IVVc IVr,retIVr,secIVr;
  row IVVc IVrw,retIVrw,secIVrw;
  record ItemHistVc sourceIHr,targetIHr;
  Integer pos,rwcnt,i;
  boolean TrHs,testf,foundf,storeIVf;
  val unitCost;
  LongInt sourceIVNr;
  
    IVr.SerNr = -1;
    while (LoopMain(IVr,1,true)) begin
    	rwcnt = MatRowCnt(IVr);
    	storeIVf = false;
    	for (i=0;i<rwcnt;i=i+1) begin
    	  MatRowGet(IVr,i,IVrw);
    	  if (IVrw.Quant<0 and IVrw.RetIVNum>-1) then begin
    	    
          retIVr.SerNr = IVrw.RetIVNum;
          ReadFirstMain(retIVr,1,true);
          MatRowGet(retIVr,IVrw.RetIVRow,retIVrw);
          if (IVrw.ArtCode!=retIVrw.ArtCode or IVrw.SerialNr!=retIVrw.SerialNr) then begin
            
            sourceIHr.SerialNr = IVrw.SerialNr;
            sourceIHr.FileName = "IVVc";
            TrHs = true;
            foundf = false;
            unitCost = blankval;
            sourceIVNr = -1;
            while (LoopbackKey("SerialNr",sourceIHr,2,TrHs)) begin
              testf = true;
              if (sourceIHr.ArtCode!=IVrw.ArtCode or sourceIHr.SerialNr!=IVrw.SerialNr or sourceIHr.FileName!="IVVc") then begin TrHs = true; testf = false; end;
              if (sourceIHr.TransDate>IVr.InvDate) then begin testf = false; end;
              if (IVr.SerNr==sourceIHr.TransNr) then begin  testf = false; end;
              if (sourceIHr.Qty>0)then begin testf = false; end;
              if (testf) then begin
                if (sourceIHr.Row==IVrw.RetIVNum) then begin
                  unitCost = AbsoluteVal(sourceIHr.TotCostPrice/sourceIHr.Qty);
                  sourceIVNr = sourceIHr.TransNr;
                  TrHs = false;
                  foundf = true;
                  LogText(0,IVrw.ArtCode & " " & IVrw.SerialNr & "   cost:" & IVrw.FIFO);
                  LogText(0,sourceIHr.ArtCode & " " & sourceIHr.SerialNr & "   Row:" & sourceIHr.Row & "   Cost:"  & AbsoluteVal(sourceIHr.TotCostPrice/sourceIHr.Qty) & "   IVVc Source Nr:" & sourceIHr.TransNr);
                  LogText(0,"--------------------------");
                end;
              end;
            end;RESETLOOP(sourceIHr);
            if (foundf==false) then begin
              LogText(0,"Not found such item");
              LogText(0,IVrw.ArtCode & " " & IVrw.SerialNr & "   cost:" & IVrw.FIFO);
            end;
            LogText(0,"============================");
            targetIHr.FileName = "IVVc";
            targetIHr.TransNr = IVr.SerNr;
            targetIHr.Row = i;
            if (ReadFirstKey("FNTransNr",targetIHr,3,true) and foundf) then begin
              targetIHr.TotCostPrice = AbsoluteVal(unitCost*targetIHr.Qty);
              targetIHr.RemCostPrice = AbsoluteVal(unitCost*targetIHr.RemQty);
              if (RECORDSTORE(targetIHr,true)) then begin
                IVrw.FIFO = unitCost;
                IVrw.FIFORowVal = unitCost*IVrw.Quant;
                IVrw.RetIVRow = IVrw.RetIVNum;
                IVrw.RetIVNum = sourceIVNr;
                MatRowPut(IVr,i,IVrw);
                storeIVf = true;
                ChangeCostInNextTargetRegisters(targetIHr.SerNr,unitCost);
                LogText(0,"============================");
                LogText(0," ");
              end;
            end;
          end;
        end;
    	end;
    	if (storeIVf) then begin
    	  RECORDSTORE(IVr,true);
    	end;
    end; 

return;
end; //Edit***************************Sasha2,10:39 23.02.2017 }
